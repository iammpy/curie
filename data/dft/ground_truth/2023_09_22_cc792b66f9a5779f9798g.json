{"code": "from os import environ\n\nimport numpy as np\nfrom ase import Atoms\nfrom ase.calculators.espresso import Espresso\nfrom ase.dft import DOS\nfrom ase.optimize import BFGS\nfrom pydantic import BaseModel\nfrom pymatgen.core.structure import Structure\nfrom pymatgen.ext.matproj import MPRester\n\nfrom annotations.models.QuantumEspressoParameters import \\\n    QuantumEspressoParameters\nfrom annotations.models.StructureMetadata import StructureMetadata\n\n# Functions Code\n\n\n\ndef structure_to_atoms(structure: Structure) -> Atoms:\n    symbols = [site.specie.symbol for site in structure]\n    positions = np.array([site.coords for site in structure])\n    ase_atoms = Atoms(symbols=symbols, positions=positions)\n\n    return ase_atoms\n\n\n\n\ndef download_mp_structure(\n    structure_metadata: StructureMetadata,\n) -> Atoms:\n    mp_id = structure_metadata.mp_id\n    api_key = environ.get(\"MP_API_KEY\")\n    with MPRester(api_key) as mpr:\n        structure: Structure = mpr.get_structure_by_material_id(mp_id)\n\n    return structure\n\n\ndef get_dos(atoms: Atoms) -> dict[str, list[float]]:\n    dos = DOS(atoms, width=0.1)\n    energies, weights = dos.get_energies(), dos.get_weights()\n    output = {\"energies\": energies, \"weights\": weights}\n\n    return output\n\n\ndef qe_geometric_relaxation(\n    atoms: Atoms, parameters: QuantumEspressoParameters\n) -> Atoms:\n    qe_keys = [\"pseudopotentials\", \"kpts\", \"input_data\"]\n    qe_dict = {\n        k: v for k, v in parameters.dict(exclude_none=True).items() if k in qe_keys\n    }\n    calc = Espresso(**qe_dict)\n    atoms.set_calculator(calc)\n    dyn = BFGS(atoms)\n    dyn.run(parameters.fmax)\n    return atoms\n\n\n# Inputs Code\n\n\n\nclass StructureMetadata(BaseModel):\n    id: str | None = None\n    name: str | None = None\n    type: str | None = None\n    composition: str | None = None\n    description: str | None = None\n    vacuum_x: float | None = None\n    vacuum_y: float | None = None\n    vacuum_z: float | None = None\n    supercell: str | None = None\n    cas_number: str | None = None\n    orientation: str | None = None\n    lattice_a: float | None = None\n    lattice_b: float | None = None\n    lattice_c: float | None = None\n    orientation: str | None = None\n    mp_id: str | None = None\n\n\n\nclass QuantumEspressoParameters(BaseModel):\n    pseudopotentials: str | None = None\n    kpts: str | None = None\n    ecutwfc: float | None = None\n    fmax: float | None = None\n\nstructure_metadata_NiPS3 = StructureMetadata.parse_raw('{\"name\": NaN, \"type\": NaN, \"composition\": \"NiPS3\", \"description\": \"crystal lattice\", \"vacuum_x\": NaN, \"vacuum_y\": NaN, \"vacuum_z\": NaN, \"supercell\": NaN, \"cas_number\": NaN, \"lattice_a\": NaN, \"lattice_b\": NaN, \"lattice_c\": NaN, \"space group\": NaN, \"orientation\": NaN, \"mp_id\": \"mp-676040\"}')\n\nqe_1 = QuantumEspressoParameters.parse_raw('{\"pseudopotentials\": NaN, \"xc\": \"PBE\", \"kpts\": \"(6,6,6)\", \"ecutwfc\": 120}')\n\n# Execution Code\n\nNiPS3_structure = download_mp_structure(structure_metadata_NiPS3)\nNiPS3_atoms = structure_to_atoms(NiPS3_structure)\nrelaxed_atoms = qe_geometric_relaxation(NiPS3_atoms, qe_1)\ndos = get_dos(relaxed_atoms)\n", "graph_as_text": "[{\"description\": \"downloads a structure from the materials project using its mp-id. Returns an ase atoms object\", \"function_id\": \"process_57\", \"function_name\": \"download_mp_structure\", \"input_types\": [\"StructureMetadata\"], \"inputs\": [\"structure_metadata_NiPS3\"], \"output_types\": [\"Structure\"], \"outputs\": [\"NiPS3_structure\"], \"process_type\": \"structure_generation\"}, {\"description\": \"converts a pymatgen structure to an ASE Atoms object\", \"function_id\": \"process_58\", \"function_name\": \"structure_to_atoms\", \"input_types\": [\"Structure\"], \"inputs\": [\"NiPS3_structure\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"NiPS3_atoms\"], \"process_type\": \"utility\"}, {\"description\": \"runs a DFT relaxation using ase and the quantum espresso calculator\", \"function_id\": \"process_59\", \"function_name\": \"qe_geometric_relaxation\", \"input_types\": [\"Atoms\", \"QuantumEspressoParameters\"], \"inputs\": [\"NiPS3_atoms\", \"qe_1\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"relaxed_atoms\"], \"process_type\": \"dft\"}, {\"description\": \"gets the energies and weights for the DOS from an ase atoms object\", \"function_id\": \"process_60\", \"function_name\": \"get_dos\", \"input_types\": [\"Atoms\"], \"inputs\": [\"relaxed_atoms\"], \"output_types\": [\"dict\"], \"outputs\": [\"dos\"], \"process_type\": \"analysis\"}]", "no_header_code": "from os import environ\n\nimport numpy as np\nfrom ase import Atoms\nfrom ase.calculators.espresso import Espresso\nfrom ase.dft import DOS\nfrom ase.optimize import BFGS\nfrom pydantic import BaseModel\nfrom pymatgen.core.structure import Structure\nfrom pymatgen.ext.matproj import MPRester\n\nfrom annotations.models.QuantumEspressoParameters import \\\n    QuantumEspressoParameters\nfrom annotations.models.StructureMetadata import StructureMetadata\n\n# Functions Code\n\n\n\ndef get_dos(atoms: Atoms) -> dict[str, list[float]]:\n    dos = DOS(atoms, width=0.1)\n    energies, weights = dos.get_energies(), dos.get_weights()\n    output = {\"energies\": energies, \"weights\": weights}\n\n    return output\n\n\ndef structure_to_atoms(structure: Structure) -> Atoms:\n    symbols = [site.specie.symbol for site in structure]\n    positions = np.array([site.coords for site in structure])\n    ase_atoms = Atoms(symbols=symbols, positions=positions)\n\n    return ase_atoms\n\n\n\n\ndef download_mp_structure(\n    structure_metadata: StructureMetadata,\n) -> Atoms:\n    mp_id = structure_metadata.mp_id\n    api_key = environ.get(\"MP_API_KEY\")\n    with MPRester(api_key) as mpr:\n        structure: Structure = mpr.get_structure_by_material_id(mp_id)\n\n    return structure\n\n\ndef qe_geometric_relaxation(\n    atoms: Atoms, parameters: QuantumEspressoParameters\n) -> Atoms:\n    qe_keys = [\"pseudopotentials\", \"kpts\", \"input_data\"]\n    qe_dict = {\n        k: v for k, v in parameters.dict(exclude_none=True).items() if k in qe_keys\n    }\n    calc = Espresso(**qe_dict)\n    atoms.set_calculator(calc)\n    dyn = BFGS(atoms)\n    dyn.run(parameters.fmax)\n    return atoms\n\n\n# Inputs Code\n\n\n\nclass StructureMetadata(BaseModel):\n    id: str | None = None\n    name: str | None = None\n    type: str | None = None\n    composition: str | None = None\n    description: str | None = None\n    vacuum_x: float | None = None\n    vacuum_y: float | None = None\n    vacuum_z: float | None = None\n    supercell: str | None = None\n    cas_number: str | None = None\n    orientation: str | None = None\n    lattice_a: float | None = None\n    lattice_b: float | None = None\n    lattice_c: float | None = None\n    orientation: str | None = None\n    mp_id: str | None = None\n\n\n\nclass QuantumEspressoParameters(BaseModel):\n    pseudopotentials: str | None = None\n    kpts: str | None = None\n    ecutwfc: float | None = None\n    fmax: float | None = None\n\nstructure_metadata_NiPS3 = StructureMetadata.parse_raw('{\"name\": NaN, \"type\": NaN, \"composition\": \"NiPS3\", \"description\": \"crystal lattice\", \"vacuum_x\": NaN, \"vacuum_y\": NaN, \"vacuum_z\": NaN, \"supercell\": NaN, \"cas_number\": NaN, \"lattice_a\": NaN, \"lattice_b\": NaN, \"lattice_c\": NaN, \"space group\": NaN, \"orientation\": NaN, \"mp_id\": \"mp-676040\"}')\n\nqe_1 = QuantumEspressoParameters.parse_raw('{\"pseudopotentials\": NaN, \"xc\": \"PBE\", \"kpts\": \"(6,6,6)\", \"ecutwfc\": 120}')\n\n# Execution Code\n\nNiPS3_structure = download_mp_structure(structure_metadata_NiPS3)\nNiPS3_atoms = structure_to_atoms(NiPS3_structure)\nrelaxed_atoms = qe_geometric_relaxation(NiPS3_atoms, qe_1)\ndos = get_dos(relaxed_atoms)\n", "record_id": "2023_09_22_cc792b66f9a5779f9798g"}