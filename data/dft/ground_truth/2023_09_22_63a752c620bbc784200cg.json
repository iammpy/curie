{"code": "import random\nfrom copy import deepcopy\nfrom json import loads\n\nimport ase\nfrom ase import Atoms\nfrom ase.optimize import BFGS\nfrom pydantic import BaseModel, Field\n\nfrom annotations.models.DFTParametersGeneral import DFTParametersGeneral\nfrom annotations.models.StructureMetadata import StructureMetadata\n\n# Functions Code\n\n\n\ndef structure_from_metadata(\n    metadata: StructureMetadata,\n) -> Atoms:\n    pass\n\n\ndef defect_formation_energy_analysis_1ad449cfb6139fb9eae9ff899ef32fcdfdfc4dd5(\n    doped_structure: list[Atoms], undoped_structure: Atoms\n) -> list[float]:\n    pass\n\n\ndef add_dopants_1ad449cfb6139fb9eae9ff899ef32fcdfdfc4dd5(atoms: Atoms) -> list[Atoms]:\n    N = 10\n    list1 = (\"V\", \"Nb\")\n    list2 = (\"Cr\", \"Mn\", \"Fe\", \"Co\", \"Ni\", \"Mo\", \"Tc\", \"Ru\", \"Pd\")\n\n    ti_indices = [i for i, atom in enumerate(atoms) if atom.symbol == \"Ti\"]\n    if len(ti_indices) < 2:\n        raise ValueError(f\"Input structure did not have enough Ti atoms\")\n\n    modified_atoms_list = []\n    for i in range(N):\n        modified_atoms = deepcopy(atoms)\n\n        idx1 = random.choice(ti_indices)\n        modified_atoms[idx1].symbol = random.choice(list1)\n        ti_indices.remove(idx1)\n\n        idx2 = random.choice(ti_indices)\n        modified_atoms[idx2].symbol = random.choice(list2)\n\n        modified_atoms_list.append(modified_atoms)\n\n    return modified_atoms_list\n\n\n\n### Key maps\n\nvasp_map = {\n    \"exchange_correlation_functional\": \"xc\",\n    \"kpoints\": \"kpts\",\n    \"pseudopotentials\": \"pp\",\n    \"energy_cutoff\": \"encut\",\n    \"energy_convergence_criterion\": \"ediff\",\n}\n\ncrystal_map = {\n    \"exchange_correlation_functional\": \"xc\",\n    \"spin\": \"spinpol\"\n    \"basis_set\": \"basis\",\n    \"kpoints\": \"kpts\",\n    \"ase_otherkeys\": \"otherkeys\"\n}\n\ngaussian_map = {\n    \"exchange_correlation_functional\": \"xc\",\n    \"basis_set\": \"basis\",\n    \"ase_otherkeys\": \"extra\"\n}\n\nsiesta_map = {\n    \"exchange_correlation_functional\": \"xc\",\n    \"basis_set\": \"basis_set\",\n    \"kpoints\": \"kpts\",\n}\n\nqe_map = {\n    \"pseudopotentials\": \"pseudopotentials\",\n    \"kpoints\": \"kpts\",\n    \"ase_otherkeys\": \"input_data\",\n}\n\nmopac_map = {}\n\ncp2k_map = {\n    \"basis_set\": \"basis_set\",\n    \"energy_cutoff\": \"cutoff\",\n    \"exchange_correlation_functional\": \"xc\",\n    \"pseudopotentials\": \"pseudo_potential\",\n}\n\ndmol_map = {\n    \"basis_set\": \"basis\",\n    \"exchange_correlation_functional\": \"functional\",\n    \"energy_convergence_criterion\": \"scf_density_convergence\",\n    \"pseudopotentials\": \"pseudopotential\",\n    \"spin\": \"spin_polarization\",\n}\n\norca_map = {}\ngamess_map = {}\n\nkey_maps = {\"vasp\": vasp_map, \"crystal\": crystal_map, \"gaussian\": gaussian_map, \"siesta\": siesta_map, \"qe\": qe_map, \"mopac\": mopac_map, \"cp2k\": cp2k_map, \"dmol\": dmol_map, \"orca\": orca_map, \"gamess\": gamess_map}\n\n### Kwarg Lists\n\nase_vasp_kwargs = [\n    \"command\",\n    \"restart\",\n    \"xc\",\n    \"setups\",\n    \"pp\",\n    \"kpts\",\n    \"gamma\",\n    \"reciprocal\",\n    \"charge\",\n    \"prec\",\n    \"encut\",\n    \"ediff\",\n    \"nbands\",\n    \"algo\",\n    \"ismear\",\n    \"sigma\",\n    \"nelm\",\n]\n\ncrystal_kwargs = [\n    \"restart\",\n    \"xc\",\n    \"spinpol\",\n    \"guess\",\n    \"basis\",\n    \"kpts\",\n    \"isp\",\n    \"smearing\",\n    \"otherkeys\"\n]\n\ngaussian_kwargs = [\n    \"label\",\n    \"output_type\",\n    \"method\",\n    \"xc\",\n    \"basis\",\n    \"fitting_basis\",\n    \"charge\",\n    \"mult\",\n    \"basisfile\",\n    \"basis_set\",\n    \"extra\",\n    \"addsec\",\n    \"ioplist\",\n    \"spinlist\",\n    \"zefflist\",\n    \"qmomlist\",\n    \"nmagmlist\",\n    \"znuclist\",\n    \"radnuclearlist\",\n]\n\nsiesta_kwargs = [\n    \"label\",\n    \"mesh_cutoff\",\n    \"xc\",\n    \"energy_shift\",\n    \"kpts\",\n    \"basis_set\",\n    \"spin\",\n    \"species\",\n]\n\nqe_kwargs = [\"pseudopotentials\", \"kpts\", \"input_data\", \"kspacing\", \"koffset\"]\n\nmopac_kwargs = []\n\ncp2k_kwargs = [\n    \"auto_write\",\n    \"basis_set\",\n    \"basis_set_file\",\n    \"charge\",\n    \"command\",\n    \"cutoff\",\n    \"debug\",\n    \"force_eval_method\",\n    \"inp\",\n    \"options\",\n    \"max_scf\",\n    \"multiplicity\",\n    \"poisson_solver\",\n    \"potential_file\",\n    \"pseudo_potential\",\n    \"stress_tensor\",\n    \"uks\",\n    \"xc\",\n    \"print_level\",\n]\n\ndmol_kwargs = [\n    \"symmetry\",\n    \"spin_polarization\",\n    \"charge\",\n    \"basis\",\n    \"pseudopotential\",\n    \"functional\",\n    \"scf_density_convergence\",\n]\n\norca_kwargs = [\n    \"charge\",\n    \"mult\",\n    \"orcasimpleinput\",\n    \"orcablocks\",\n]\n\ngamess_kwargs = [\n    \"label\",\n    \"userscr\",\n    \"basis\",\n    \"ecp\",\n    \"exchange_correlation_functional\",\n    \"basis_set\",\n]\n\nase_kwarg_lists = {\"vasp\": ase_vasp_kwargs, \"crytsal\": crystal_kwargs, \"gaussian\": gaussian_kwargs, \"siesta\": siesta_kwargs, \"qe\": qe_kwargs, \"mopac\": mopac_kwargs, \"cp2k\": cp2k_kwargs, \"dmol\": dmol_kwargs, \"orca\": orca_kwargs, \"gamess\": gamess_kwargs}\n\n### Caluclators\n\nase_calculators = {\n    \"vasp\": ase.calculators.vasp.Vasp,\n    \"crystal\": ase.calculators.crystal.CRYSTAL,\n    \"gaussian\": ase.calculators.gaussian.Gaussian,\n    \"siesta\": ase.calculators.siesta.Siesta,\n    \"qe\": ase.calculators.espresso.Espresso,\n    \"mopac\": ase.calculators.mopac.MOPAC,\n    \"cp2k\": ase.calculators.cp2k.CP2K,\n    \"dmol\": ase.calculators.dmol.DMol3,\n    \"orca\": ase.calculators.orca.ORCA,\n    \"gamess\": ase.calculators.gamess_us.GAMESSUS,\n}\n\n\n### Setup Functions\n\n\ndef vasp_setup(input_kwargs: dict, dft_parameters: dict) -> dict:\n    hubbard_U_dict = dft_parameters.get(\"hubbard_U\")\n    if hubbard_U_dict is not None:\n        ldau_luj = {}\n        for element, u_value in hubbard_U_dict.items():\n            ldau_luj[element] = {\"L\": 2, \"U\": u_value, \"J\": 0}\n\n        ldau_params = {\n            \"LDAU\": True,\n            \"LDAUTYPE\": 2,\n            \"LDAUL\": [ldau_luj[element][\"L\"] for element in hubbard_U_dict.keys()],\n            \"LDAUU\": [ldau_luj[element][\"U\"] for element in hubbard_U_dict.keys()],\n            \"LDAUJ\": [ldau_luj[element][\"J\"] for element in hubbard_U_dict.keys()],\n        }\n\n        input_kwargs = {**input_kwargs, **ldau_params}\n\n    if dft_parameters.get(\"relaxed_nuclei\"):\n        input_kwargs[\"isif\"] = 2\n\n        if dft_parameters.get(\"relaxed_unit_cell\"):\n            input_kwargs[\"isif\"] = 3\n\n    else:\n        input_kwargs[\"ibrion\"] = -1\n\n    return input_kwargs\n\n\ndef siesta_setup(input_kwargs: dict, dft_parameters: dict) -> dict:\n    manually_set_spin = dft_parameters.get(\"other_information\").get(\"spin\") \n    if manually_set_spin is not None:\n        input_kwargs[\"spin\"] = manually_set_spin\n    elif dft_parameters.get(\"spin\"):\n        input_kwargs[\"spin\"] = \"spin-orbit\"\n    else:\n        input_kwargs[\"spin\"] = \"non-polarized\"\n\n    return input_kwargs\n\n\ndef qe_setup(input_kwargs: dict, dft_parameters: dict) -> dict:\n    input_data = input_kwargs.get(\"input_data\")\n    if input_data is None:\n        input_data = {}\n\n    input_data[\"system\"] = {\n        'ecutwfc': dft_parameters.get(\"energy_cutoff\"),\n        'input_dft': dft_parameters.get(\"exchange_correlation_functional\"),\n    }\n    input_data[\"control\"] = {\"convergence_threshold\": dft_parameters.get(\"energy_convergence_criterion\")}\n\n    if dft_parameters.get(\"hubbard_U\") is not None:\n        input_data[\"system\"][\"Hubbard_U\"] = dft_parameters.get(\"hubbard_U\")\n        input_data[\"system\"][\"lda_plus_u\"] = True\n\n    if dft_parameters.get(\"spin\"):\n        input_data[\"system\"][\"nspin\"] = 2\n\n    input_kwargs[\"input_data\"] = input_data\n\n    return input_kwargs\n        \n\ndef gamess_setup(input_kwargs: dict, dft_parameters: dict) -> dict:\n    contrl = {\"dfttyp\": dft_parameters[\"exchange_correlation_functional\"]}\n    basis = {\"gbasis\": dft_parameters[\"basis_set\"]}\n    if dft_parameters.get(\"tddft\") is not None:\n        contrl[\"tddft\"] = dft_parameters[\"tddft\"]\n    \n    input_kwargs = {\"contrl\": contrl, \"basis\": basis, **input_kwargs}\n\n    return input_kwargs\n\n\nsetup_functions = {\"vasp\": vasp_setup, \"siesta\": siesta_setup, \"qe\": qe_setup, \"gamess\": gamess_setup}\n\n\n### General Code\n\nJSON_FIELDS = [\"kpoints\", \"hubbard_U\", \"ase_otherkeys\", \"other_information\"]\n\n\ndef dft_general(atoms: Atoms, dft_parameters: DFTParametersGeneral):\n    # Convert from pydantic to dict\n    dft_dict = dft_parameters.dict()\n\n    # Convert json strings to dict\n    for field_name in JSON_FIELDS:\n        if field_name in dft_parameters.keys():\n            dft_dict[field_name] = loads(dft_parameters[field_name])\n\n    # Check to make sure the DFT code is supported by this function\n    code = dft_dict.get(\"code\")\n    if (\n        code is None\n        or code not in key_maps\n        or code not in ase_kwarg_lists\n        or code not in ase_calculators\n    ):\n        key_map_codes = set(key_maps.keys())\n        ase_kwarg_codes = set(ase_kwarg_lists.keys())\n        ase_calculator_codes = set(ase_calculators.keys())\n        supported_codes = key_map_codes.intersection(ase_calculator_codes).intersection(\n            ase_kwarg_codes\n        )\n        raise ValueError(\n            f\"DFT code name {code} is not suppported yet. Supported codes are: {str(supported_codes)}\"\n        )\n\n    # Replace general keys with code-specific keys.\n    key_map = key_maps[code]\n    specific_dft_dict = {}\n    for general_key_name, value in key_map.items():\n        specific_key_name = key_map.get(general_key_name)\n        if specific_key_name is None:\n            specific_dft_dict[general_key_name] = value\n        else:\n            specific_dft_dict[specific_key_name] = value\n\n    # Prepare the inputs to the ASE calculator's __init__ by only keeping keys that the ASE calculator will accept as kwargs\n    kwarg_list = ase_kwarg_lists[code]\n    specific_kwarg_input_dict = {\n        k: v\n        for k, v in specific_dft_dict.items()\n        if k in kwarg_list\n    }\n\n    # If dft-code-specific kwargs were entered into the sheet, include them here\n    additional_kwargs = dft_dict.get(\"other_information\")\n    if additional_kwargs is not None:\n        specific_kwarg_input_dict = {**specific_kwarg_input_dict, **additional_kwargs}\n\n    # If there is any dft-code-specific setup for the inputs dictionary remaining, do it here\n    setup_function = setup_functions.get(\"code\")\n    if setup_function is not None:\n        modified_input_dict = setup_function(\n            specific_kwarg_input_dict, specific_dft_dict\n        )\n    else:\n        modified_input_dict = specific_kwarg_input_dict\n\n    # Define and set the calculator\n    calculator = ase_calculators[code]\n    calc = calculator(**modified_input_dict)\n    atoms.set_calculator(calc)\n\n    # Run DFT\n    if dft_dict.get(\"relaxed_unit_cell\"):\n        dyn = BFGS(atoms)\n        dyn.run(dft_dict.get(\"force_convergence_criterion\"))\n    else:\n        atoms.get_potential_energy()\n\n    return atoms\n\n\ndef get_band_structure(atoms: Atoms):\n    return atoms.calc.band_structure()\n\n\n# Inputs Code\n\n\n\nclass DFTParametersGeneral(BaseModel):\n    id: str | None\n    code: str | None\n    exchange_correlation_functional: str | None = Field(..., alias=\"functional\")\n    kpoints: str | None = Field(..., alias=\"k-points\")\n    pseudopotentials: str | None\n    basis_set: str | None\n    energy_cutoff: float | None\n    force_convergence_criterion: float | None = Field(..., alias=\"force_convergence\")\n    energy_convergence_criterion: float | None = Field(..., alias=\"energy_convergence\")\n    relaxed_nuclei: bool | None\n    relaxed_unit_cell: bool | None\n    spin: bool | None\n    hubbard_U: str | None\n    ase_otherkeys: str | None\n    other_information: str | None\n    notes: str | None\n\n\n\nclass StructureMetadataGeneral(BaseModel):\n    id: str | None\n    common_name: str | None\n    scientific_name: str | None\n    type: str | None\n    composition: str | None\n    crystal_or_isolated: str | None\n    vacuum: str | None\n    supercell: str | None\n    cas_number: str | None\n    lattice_parameters: str | None\n    space_group: str | None\n    mp_id: str | None\n    isomer: str | None\n    cell_size: str | None\n    miller_indices: str | None\n    crystal_structure: str | None\n    additional_information: str | None\n\nstructure_metadata_batio3_super = StructureMetadataGeneral.parse_raw('{\"common_name\": NaN, \"scientific_name\": \"Barium Titanate\", \"type\": \"bulk\", \"composition\": \"BaTiO3\", \"crystal_or_isolated\": \"crystal lattice\", \"vacuum\": NaN, \"supercell\": \"[2,2,3]\", \"cell_size\": NaN, \"cas_number\": NaN, \"lattice_parameters\": NaN, \"space_group\": NaN, \"mp_id\": NaN, \"isomer\": NaN, \"miller_indices\": NaN, \"crystal_structure\": NaN, \"additional_information\": NaN}')\n\nstructure_metadata_batio3 = StructureMetadataGeneral.parse_raw('{\"common_name\": NaN, \"scientific_name\": \"Barium Titanate\", \"type\": \"bulk\", \"composition\": \"BaTiO3\", \"crystal_or_isolated\": \"crystal lattice\", \"vacuum\": NaN, \"supercell\": \"[1,1,1]\", \"cell_size\": NaN, \"cas_number\": NaN, \"lattice_parameters\": NaN, \"space_group\": NaN, \"mp_id\": NaN, \"isomer\": NaN, \"miller_indices\": NaN, \"crystal_structure\": NaN, \"additional_information\": NaN}')\n\ndft_params_9 = DFTParametersGeneral.parse_raw('{\"software\": \"vasp\", \"functional\": \"PBE\", \"k-points\": \"[4,4,2]\", \"pseudopotentials\": NaN, \"basis_set\": NaN, \"energy_cutoff\": 500.0, \"force_convergence\": 0.01, \"energy_convergence\": NaN, \"relaxed_nuclei\": 1.0, \"relaxed_unit_cell\": 1.0, \"spin\": 1.0, \"hubbard_U\": NaN, \"ase_otherkeys\": NaN, \"other_information\": NaN, \"notes\": NaN}')\n\n# Execution Code\n\natoms_batio3_super, atoms_batio3 = structure_from_metadata(structure_metadata_batio3_super, structure_metadata_batio3)\ndoped_structures = add_dopants_1ad449cfb6139fb9eae9ff899ef32fcdfdfc4dd5(atoms_batio3_super)\nrelaxed_atoms_batio3 = dft_general(atoms_batio3, dft_params_9)\nrelaxed_doped_structures = []\nfor doped_structures_entry in doped_structures:\n    relaxed_doped_structures_entry = dft_general(doped_structures_entry, dft_params_9)\n    relaxed_doped_structures.append(relaxed_doped_structures_entry)\n\ndefect_formation_energies = []\nfor relaxed_doped_structures_entry in relaxed_doped_structures:\n    defect_formation_energies_entry = defect_formation_energy_analysis_1ad449cfb6139fb9eae9ff899ef32fcdfdfc4dd5(relaxed_doped_structures_entry, relaxed_atoms_batio3)\n    defect_formation_energies.append(defect_formation_energies_entry)\n\nband_structures = []\nfor relaxed_doped_structures_entry in relaxed_doped_structures:\n    band_structures_entry = get_band_structure(relaxed_doped_structures_entry)\n    band_structures.append(band_structures_entry)\n\n", "graph_as_text": "[{\"description\": \"takes in metadata about a structure and returns the structure or list of structures as ASE atoms objects\", \"function_id\": \"process_97\", \"function_name\": \"structure_from_metadata\", \"input_types\": [\"StructureMetadataGeneral\", \"StructureMetadataGeneral\"], \"inputs\": [\"structure_metadata_batio3_super\", \"structure_metadata_batio3\"], \"output_types\": [\"Atoms\", \"Atoms\"], \"outputs\": [\"atoms_batio3_super\", \"atoms_batio3\"], \"process_type\": \"structure_generation\"}, {\"description\": \"randomly replaces Ti atoms with dopants from the list of choices specifically mentioned in this paper\", \"function_id\": \"process_98\", \"function_name\": \"add_dopants_1ad449cfb6139fb9eae9ff899ef32fcdfdfc4dd5\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_batio3_super\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"doped_structures\"], \"process_type\": \"structure_generation\"}, {\"description\": \"takes in generic DFT parameters and runs a DFT calculation\", \"function_id\": \"process_100\", \"function_name\": \"dft_general\", \"input_types\": [\"Atoms\", \"DFTParametersGeneral\"], \"inputs\": [\"atoms_batio3\", \"dft_params_9\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"relaxed_atoms_batio3\"], \"process_type\": \"dft\"}, {\"description\": \"takes in generic DFT parameters and runs a DFT calculation\", \"function_id\": \"process_99\", \"function_name\": \"dft_general\", \"input_types\": [\"list[Atoms]\", \"DFTParametersGeneral\"], \"inputs\": [\"doped_structures\", \"dft_params_9\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"relaxed_doped_structures\"], \"process_type\": \"dft\"}, {\"description\": \"takes in a list of doped structures, an undoped structure, and uses reference energies to calculate formation energies of the doped structures\", \"function_id\": \"process_101\", \"function_name\": \"defect_formation_energy_analysis_1ad449cfb6139fb9eae9ff899ef32fcdfdfc4dd5\", \"input_types\": [\"list[Atoms]\", \"Atoms\"], \"inputs\": [\"relaxed_doped_structures\", \"relaxed_atoms_batio3\"], \"output_types\": [\"list[float]\"], \"outputs\": [\"defect_formation_energies\"], \"process_type\": \"analysis\"}, {\"description\": \"gets the band structure from an ase atoms object after DFT has been run\", \"function_id\": \"process_102\", \"function_name\": \"get_band_structure\", \"input_types\": [\"list[Atoms]\"], \"inputs\": [\"relaxed_doped_structures\"], \"output_types\": [\"list[dict]\"], \"outputs\": [\"band_structures\"], \"process_type\": \"analysis\"}]", "no_header_code": "import random\nfrom copy import deepcopy\n\nfrom ase import Atoms\nfrom pydantic import BaseModel, Field\n\nfrom annotations.functions.dft_general import dft_general\nfrom annotations.models.StructureMetadata import StructureMetadata\n\n# Functions Code\n\n\n\ndef defect_formation_energy_analysis_1ad449cfb6139fb9eae9ff899ef32fcdfdfc4dd5(\n    doped_structure: list[Atoms], undoped_structure: Atoms\n) -> list[float]:\n    pass\n\n\ndef structure_from_metadata(\n    metadata: StructureMetadata,\n) -> Atoms:\n    pass\n\n\ndef add_dopants_1ad449cfb6139fb9eae9ff899ef32fcdfdfc4dd5(atoms: Atoms) -> list[Atoms]:\n    N = 10\n    list1 = (\"V\", \"Nb\")\n    list2 = (\"Cr\", \"Mn\", \"Fe\", \"Co\", \"Ni\", \"Mo\", \"Tc\", \"Ru\", \"Pd\")\n\n    ti_indices = [i for i, atom in enumerate(atoms) if atom.symbol == \"Ti\"]\n    if len(ti_indices) < 2:\n        raise ValueError(f\"Input structure did not have enough Ti atoms\")\n\n    modified_atoms_list = []\n    for i in range(N):\n        modified_atoms = deepcopy(atoms)\n\n        idx1 = random.choice(ti_indices)\n        modified_atoms[idx1].symbol = random.choice(list1)\n        ti_indices.remove(idx1)\n\n        idx2 = random.choice(ti_indices)\n        modified_atoms[idx2].symbol = random.choice(list2)\n\n        modified_atoms_list.append(modified_atoms)\n\n    return modified_atoms_list\n\n\n\ndef get_band_structure(atoms: Atoms):\n    return atoms.calc.band_structure()\n\n\n# Inputs Code\n\n\n\nclass DFTParametersGeneral(BaseModel):\n    id: str | None\n    code: str | None\n    exchange_correlation_functional: str | None = Field(..., alias=\"functional\")\n    kpoints: str | None = Field(..., alias=\"k-points\")\n    pseudopotentials: str | None\n    basis_set: str | None\n    energy_cutoff: float | None\n    force_convergence_criterion: float | None = Field(..., alias=\"force_convergence\")\n    energy_convergence_criterion: float | None = Field(..., alias=\"energy_convergence\")\n    relaxed_nuclei: bool | None\n    relaxed_unit_cell: bool | None\n    spin: bool | None\n    hubbard_U: str | None\n    ase_otherkeys: str | None\n    other_information: str | None\n    notes: str | None\n\n\n\nclass StructureMetadataGeneral(BaseModel):\n    id: str | None\n    common_name: str | None\n    scientific_name: str | None\n    type: str | None\n    composition: str | None\n    crystal_or_isolated: str | None\n    vacuum: str | None\n    supercell: str | None\n    cas_number: str | None\n    lattice_parameters: str | None\n    space_group: str | None\n    mp_id: str | None\n    isomer: str | None\n    cell_size: str | None\n    miller_indices: str | None\n    crystal_structure: str | None\n    additional_information: str | None\n\nstructure_metadata_batio3_super = StructureMetadataGeneral.parse_raw('{\"common_name\": NaN, \"scientific_name\": \"Barium Titanate\", \"type\": \"bulk\", \"composition\": \"BaTiO3\", \"crystal_or_isolated\": \"crystal lattice\", \"vacuum\": NaN, \"supercell\": \"[2,2,3]\", \"cell_size\": NaN, \"cas_number\": NaN, \"lattice_parameters\": NaN, \"space_group\": NaN, \"mp_id\": NaN, \"isomer\": NaN, \"miller_indices\": NaN, \"crystal_structure\": NaN, \"additional_information\": NaN}')\n\nstructure_metadata_batio3 = StructureMetadataGeneral.parse_raw('{\"common_name\": NaN, \"scientific_name\": \"Barium Titanate\", \"type\": \"bulk\", \"composition\": \"BaTiO3\", \"crystal_or_isolated\": \"crystal lattice\", \"vacuum\": NaN, \"supercell\": \"[1,1,1]\", \"cell_size\": NaN, \"cas_number\": NaN, \"lattice_parameters\": NaN, \"space_group\": NaN, \"mp_id\": NaN, \"isomer\": NaN, \"miller_indices\": NaN, \"crystal_structure\": NaN, \"additional_information\": NaN}')\n\ndft_params_9 = DFTParametersGeneral.parse_raw('{\"software\": \"vasp\", \"functional\": \"PBE\", \"k-points\": \"[4,4,2]\", \"pseudopotentials\": NaN, \"basis_set\": NaN, \"energy_cutoff\": 500.0, \"force_convergence\": 0.01, \"energy_convergence\": NaN, \"relaxed_nuclei\": 1.0, \"relaxed_unit_cell\": 1.0, \"spin\": 1.0, \"hubbard_U\": NaN, \"ase_otherkeys\": NaN, \"other_information\": NaN, \"notes\": NaN}')\n\n# Execution Code\n\natoms_batio3_super, atoms_batio3 = structure_from_metadata(structure_metadata_batio3_super, structure_metadata_batio3)\ndoped_structures = add_dopants_1ad449cfb6139fb9eae9ff899ef32fcdfdfc4dd5(atoms_batio3_super)\nrelaxed_atoms_batio3 = dft_general(atoms_batio3, dft_params_9)\nrelaxed_doped_structures = []\nfor doped_structures_entry in doped_structures:\n    relaxed_doped_structures_entry = dft_general(doped_structures_entry, dft_params_9)\n    relaxed_doped_structures.append(relaxed_doped_structures_entry)\n\ndefect_formation_energies = []\nfor relaxed_doped_structures_entry in relaxed_doped_structures:\n    defect_formation_energies_entry = defect_formation_energy_analysis_1ad449cfb6139fb9eae9ff899ef32fcdfdfc4dd5(relaxed_doped_structures_entry, relaxed_atoms_batio3)\n    defect_formation_energies.append(defect_formation_energies_entry)\n\nband_structures = []\nfor relaxed_doped_structures_entry in relaxed_doped_structures:\n    band_structures_entry = get_band_structure(relaxed_doped_structures_entry)\n    band_structures.append(band_structures_entry)\n\n", "record_id": "2023_09_22_63a752c620bbc784200cg"}