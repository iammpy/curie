{"code": "from os import environ\n\nimport numpy as np\nfrom ase import Atoms\nfrom ase.calculators.gaussian import Gaussian\nfrom ase.optimize import BFGS\nfrom chemspipy import ChemSpider\nfrom pydantic import BaseModel\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem\nfrom rdkit.Chem.rdchem import Mol\n\nfrom annotations.models.GaussianParameters import GaussianParameters\nfrom annotations.models.Position import Position\n\n# Functions Code\n\n\n\ndef chemspider_structure_download(chemical_name: str) -> Mol:\n    chemspider_api_key = environ.get(\"CHEMSPIDER_API_KEY\")\n    cs = ChemSpider(chemspider_api_key)\n    results = cs.search(chemical_name)\n    if not results:\n        return None\n    compound = results[0]\n    smiles = compound.smiles\n    mol = Chem.MolFromSmiles(smiles)\n    mol = Chem.AddHs(mol)\n    AllChem.EmbedMolecule(mol)\n\n    return mol\n\n\ndef rdkit_to_ase(mol: Mol) -> Atoms:\n    \"\"\"Convert RDKit molecule to ASE Atoms object.\"\"\"\n    positions = mol.GetConformer().GetPositions()\n    atomic_numbers = [atom.GetAtomicNum() for atom in mol.GetAtoms()]\n    ase_atoms = Atoms(numbers=atomic_numbers, positions=positions)\n\n    return ase_atoms\n\n\ndef get_total_energy(atoms: Atoms) -> float:\n    return atoms.get_potential_energy()\n\n\ndef gaussian_relaxation(atoms: Atoms, parameters: GaussianParameters) -> Atoms:\n    gaussian_keys = [\n        \"label\",\n        \"output_type\",\n        \"method\",\n        \"xc\",\n        \"basis\",\n        \"fitting_basis\",\n        \"charge\",\n        \"mult\",\n        \"basisfile\",\n        \"basis_set\",\n        \"extra\",\n        \"addsec\",\n        \"ioplist\",\n        \"spinlist\",\n        \"zefflist\",\n        \"qmomlist\",\n        \"nmagmlist\",\n        \"znuclist\",\n        \"radnuclearlist\",\n    ]\n    gaussian_dict = {\n        k: v\n        for k, v in parameters.dict(exclude_none=True).items()\n        if k in gaussian_keys\n    }\n    calc = Gaussian(**gaussian_dict)\n    atoms.set_calculator(calc)\n    dyn = BFGS(atoms)\n    dyn.run(parameters.fmax)\n\n    return atoms\n\n\ndef get_adsorbate_atoms_19cfde04326178dca8accd7996fb2a1a3a356396() -> list[Atoms]:\n    adsorbates = [Atoms(\"Y\"), Atoms(\"Ba\"), Atoms(\"Zr\")]\n    return adsorbates\n\n\ndef get_binding_positions_19cfde04326178dca8accd7996fb2a1a3a356396(\n    surface: Atoms,\n) -> list[Position]:\n    pass\n\n\ndef add_adsorbate(\n    surface_atoms: Atoms, adsorbate_atoms: Atoms, position: Position | None\n) -> Atoms:\n    if position is not None:\n        position_array = np.array([position.x, position.y, position.z])\n    else:\n        max_z = max([atom.z for atom in surface_atoms])\n        new_z = max_z + 1.5\n        position_array = np.array([0.0, 0.0, new_z])\n    adsorbate_atoms.positions += position_array\n    combined_atoms = surface_atoms + adsorbate_atoms\n\n    return combined_atoms\n\n\n# Inputs Code\n\n\n\nclass StructureMetadata(BaseModel):\n    id: str | None = None\n    name: str | None = None\n    type: str | None = None\n    composition: str | None = None\n    description: str | None = None\n    vacuum_x: float | None = None\n    vacuum_y: float | None = None\n    vacuum_z: float | None = None\n    supercell: str | None = None\n    cas_number: str | None = None\n    orientation: str | None = None\n    lattice_a: float | None = None\n    lattice_b: float | None = None\n    lattice_c: float | None = None\n    orientation: str | None = None\n    mp_id: str | None = None\n\n\n\nclass GaussianParameters(BaseModel):\n    label: str | None = None\n    output_type: str | None = None\n    method: str | None = None\n    xc: str | None = None\n    basis: str | None = None\n    fitting_basis: str | None = None\n    charge: int | None = None\n    mult: int | None = None\n    basisfile: str | None = None\n    basis_set: str | None = None\n    extra: str | None = None\n    addsec: str | None = None\n    ioplist: list | None = None\n    spinlist: list | None = None\n    zefflist: list | None = None\n    qmomlist: list | None = None\n    nmagmlist: list | None = None\n    znuclist: list | None = None\n    radnuclearlist: list | None = None\n    fmax: float | None = 1e-5\n\nstructure_metadata_EDTA = StructureMetadata.parse_raw('{\"name\": \"Ethylenediaminetetraacetic acid\", \"type\": \"molecular\", \"composition\": \"C10H16N2O8\", \"description\": \"isolated molecule\", \"vacuum_x\": NaN, \"vacuum_y\": NaN, \"vacuum_z\": NaN, \"supercell\": NaN, \"cas_number\": NaN, \"lattice_a\": NaN, \"lattice_b\": NaN, \"lattice_c\": NaN, \"space group\": NaN, \"orientation\": NaN, \"mp_id\": NaN}')\n\nstructure_metadata_CA = StructureMetadata.parse_raw('{\"name\": \"Citric acid\", \"type\": \"molecular\", \"composition\": \"C6H8O7\", \"description\": \"isolated molecule\", \"vacuum_x\": NaN, \"vacuum_y\": NaN, \"vacuum_z\": NaN, \"supercell\": NaN, \"cas_number\": NaN, \"lattice_a\": NaN, \"lattice_b\": NaN, \"lattice_c\": NaN, \"space group\": NaN, \"orientation\": NaN, \"mp_id\": NaN}')\n\ngaussian_parameters_1 = GaussianParameters.parse_raw('{\"label\": NaN, \"output_type\": NaN, \"method\": NaN, \"xc\": \"B3LYP\", \"basis\": \"6-31+G*\", \"fitting_basis\": NaN, \"charge\": NaN, \"mult\": NaN, \"basisfile\": NaN, \"basis_set\": NaN, \"extra\": NaN, \"addsec\": NaN, \"ioplist\": NaN, \"spinlist\": NaN, \"zefflist\": NaN, \"qmomlist\": NaN, \"nmagmlist\": NaN, \"znuclist\": NaN, \"radnuclearlist\": NaN, \"fmax\": NaN}')\n\n# Execution Code\n\nlist_adsorbates = get_adsorbate_atoms_19cfde04326178dca8accd7996fb2a1a3a356396()\nedta_structure_mol = chemspider_structure_download(structure_metadata_EDTA)\nca_structure_mol = chemspider_structure_download(structure_metadata_CA)\nedta_atoms = rdkit_to_ase(edta_structure_mol)\nca_atoms = rdkit_to_ase(ca_structure_mol)\nedta_binding_sites = get_binding_positions_19cfde04326178dca8accd7996fb2a1a3a356396(edta_atoms)\nca_binding_sites = get_binding_positions_19cfde04326178dca8accd7996fb2a1a3a356396(ca_atoms)\nedta_complexes = []\nfor list_adsorbates_entry in list_adsorbates:\n    for edta_binding_sites_entry in edta_binding_sites:\n        edta_complexes_entry = add_adsorbate(edta_atoms, list_adsorbates_entry, edta_binding_sites_entry)\n        edta_complexes.append(edta_complexes_entry)\n\nca_complexes = []\nfor list_adsorbates_entry in list_adsorbates:\n    for ca_binding_sites_entry in ca_binding_sites:\n        ca_complexes_entry = add_adsorbate(ca_atoms, list_adsorbates_entry, ca_binding_sites_entry)\n        ca_complexes.append(ca_complexes_entry)\n\nrelaxed_edta_complexes = []\nfor edta_complexes_entry in edta_complexes:\n    relaxed_edta_complexes_entry = gaussian_relaxation(edta_complexes_entry, gaussian_parameters_1)\n    relaxed_edta_complexes.append(relaxed_edta_complexes_entry)\n\nrelaxed_ca_complexes = []\nfor ca_complexes_entry in ca_complexes:\n    relaxed_ca_complexes_entry = gaussian_relaxation(ca_complexes_entry, gaussian_parameters_1)\n    relaxed_ca_complexes.append(relaxed_ca_complexes_entry)\n\nrelaxaed_edta_energies = []\nfor relaxed_edta_complexes_entry in relaxed_edta_complexes:\n    relaxaed_edta_energies_entry = get_total_energy(relaxed_edta_complexes_entry)\n    relaxaed_edta_energies.append(relaxaed_edta_energies_entry)\n\nrelaxed_ca_energies = []\nfor relaxed_ca_complexes_entry in relaxed_ca_complexes:\n    relaxed_ca_energies_entry = get_total_energy(relaxed_ca_complexes_entry)\n    relaxed_ca_energies.append(relaxed_ca_energies_entry)\n\n", "graph_as_text": "[{\"description\": \"return a list of the adsorbate atoms objects used in this paper\", \"function_id\": \"process_21\", \"function_name\": \"get_adsorbate_atoms_19cfde04326178dca8accd7996fb2a1a3a356396\", \"input_types\": [], \"inputs\": [], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"list_adsorbates\"], \"process_type\": \"structure_generation\"}, {\"description\": \"uses chemspipy to look up a chemical by name, download it, and return the structure as an ASE atoms object\", \"function_id\": \"process_22\", \"function_name\": \"chemspider_structure_download\", \"input_types\": [\"StructureMetadata\"], \"inputs\": [\"structure_metadata_EDTA\"], \"output_types\": [\"Mol\"], \"outputs\": [\"edta_structure_mol\"], \"process_type\": \"structure_generation\"}, {\"description\": \"uses chemspipy to look up a chemical by name, download it, and return the structure as an ASE atoms object\", \"function_id\": \"process_25\", \"function_name\": \"chemspider_structure_download\", \"input_types\": [\"StructureMetadata\"], \"inputs\": [\"structure_metadata_CA\"], \"output_types\": [\"Mol\"], \"outputs\": [\"ca_structure_mol\"], \"process_type\": \"structure_generation\"}, {\"description\": \"converts an rdkit Mol object to an ASE atoms object\", \"function_id\": \"process_23\", \"function_name\": \"rdkit_to_ase\", \"input_types\": [\"Mol\"], \"inputs\": [\"edta_structure_mol\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"edta_atoms\"], \"process_type\": \"utility\"}, {\"description\": \"converts an rdkit Mol object to an ASE atoms object\", \"function_id\": \"process_26\", \"function_name\": \"rdkit_to_ase\", \"input_types\": [\"Mol\"], \"inputs\": [\"ca_structure_mol\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"ca_atoms\"], \"process_type\": \"utility\"}, {\"description\": \"returns the 5 binding positions for each adsorbate specifically for this paper\", \"function_id\": \"process_24\", \"function_name\": \"get_binding_positions_19cfde04326178dca8accd7996fb2a1a3a356396\", \"input_types\": [\"Atoms\"], \"inputs\": [\"edta_atoms\"], \"output_types\": [\"list[Position]\"], \"outputs\": [\"edta_binding_sites\"], \"process_type\": \"structure_generation\"}, {\"description\": \"returns the 5 binding positions for each adsorbate specifically for this paper\", \"function_id\": \"process_27\", \"function_name\": \"get_binding_positions_19cfde04326178dca8accd7996fb2a1a3a356396\", \"input_types\": [\"Atoms\"], \"inputs\": [\"ca_atoms\"], \"output_types\": [\"list[Position]\"], \"outputs\": [\"ca_binding_sites\"], \"process_type\": \"structure_generation\"}, {\"description\": \"takes the first set of atoms and places the second set of atoms at the position described in the final argument\", \"function_id\": \"process_28\", \"function_name\": \"add_adsorbate\", \"input_types\": [\"Atoms\", \"list[Atoms]\", \"list[Position]\"], \"inputs\": [\"edta_atoms\", \"list_adsorbates\", \"edta_binding_sites\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"edta_complexes\"], \"process_type\": \"structure_generation\"}, {\"description\": \"takes the first set of atoms and places the second set of atoms at the position described in the final argument\", \"function_id\": \"process_31\", \"function_name\": \"add_adsorbate\", \"input_types\": [\"Atoms\", \"list[Atoms]\", \"list[Position]\"], \"inputs\": [\"ca_atoms\", \"list_adsorbates\", \"ca_binding_sites\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"ca_complexes\"], \"process_type\": \"structure_generation\"}, {\"description\": \"runs a dft geometric relaxation using the Gaussian code in ase and returns the atoms object using two inputs: the calculator parameters specified in a pydantic basemodel called GaussianParameters and an input ase atoms object\", \"function_id\": \"process_29\", \"function_name\": \"gaussian_relaxation\", \"input_types\": [\"list[Atoms]\", \"GaussianParameters\"], \"inputs\": [\"edta_complexes\", \"gaussian_parameters_1\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"relaxed_edta_complexes\"], \"process_type\": \"dft\"}, {\"description\": \"runs a dft geometric relaxation using the Gaussian code in ase and returns the atoms object using two inputs: the calculator parameters specified in a pydantic basemodel called GaussianParameters and an input ase atoms object\", \"function_id\": \"process_32\", \"function_name\": \"gaussian_relaxation\", \"input_types\": [\"list[Atoms]\", \"GaussianParameters\"], \"inputs\": [\"ca_complexes\", \"gaussian_parameters_1\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"relaxed_ca_complexes\"], \"process_type\": \"dft\"}, {\"description\": \"returns the total energy as a float from the input ase atoms object\", \"function_id\": \"process_30\", \"function_name\": \"get_total_energy\", \"input_types\": [\"list[Atoms]\"], \"inputs\": [\"relaxed_edta_complexes\"], \"output_types\": [\"float\"], \"outputs\": [\"relaxaed_edta_energies\"], \"process_type\": \"analysis\"}, {\"description\": \"returns the total energy as a float from the input ase atoms object\", \"function_id\": \"process_33\", \"function_name\": \"get_total_energy\", \"input_types\": [\"list[Atoms]\"], \"inputs\": [\"relaxed_ca_complexes\"], \"output_types\": [\"float\"], \"outputs\": [\"relaxed_ca_energies\"], \"process_type\": \"analysis\"}]", "no_header_code": "from os import environ\n\nimport numpy as np\nfrom ase import Atoms\nfrom ase.calculators.gaussian import Gaussian\nfrom ase.optimize import BFGS\nfrom chemspipy import ChemSpider\nfrom pydantic import BaseModel\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem\nfrom rdkit.Chem.rdchem import Mol\n\nfrom annotations.models.GaussianParameters import GaussianParameters\nfrom annotations.models.Position import Position\n\n# Functions Code\n\n\n\ndef get_binding_positions_19cfde04326178dca8accd7996fb2a1a3a356396(\n    surface: Atoms,\n) -> list[Position]:\n    pass\n\n\ndef get_adsorbate_atoms_19cfde04326178dca8accd7996fb2a1a3a356396() -> list[Atoms]:\n    adsorbates = [Atoms(\"Y\"), Atoms(\"Ba\"), Atoms(\"Zr\")]\n    return adsorbates\n\n\ndef rdkit_to_ase(mol: Mol) -> Atoms:\n    \"\"\"Convert RDKit molecule to ASE Atoms object.\"\"\"\n    positions = mol.GetConformer().GetPositions()\n    atomic_numbers = [atom.GetAtomicNum() for atom in mol.GetAtoms()]\n    ase_atoms = Atoms(numbers=atomic_numbers, positions=positions)\n\n    return ase_atoms\n\n\ndef add_adsorbate(\n    surface_atoms: Atoms, adsorbate_atoms: Atoms, position: Position | None\n) -> Atoms:\n    if position is not None:\n        position_array = np.array([position.x, position.y, position.z])\n    else:\n        max_z = max([atom.z for atom in surface_atoms])\n        new_z = max_z + 1.5\n        position_array = np.array([0.0, 0.0, new_z])\n    adsorbate_atoms.positions += position_array\n    combined_atoms = surface_atoms + adsorbate_atoms\n\n    return combined_atoms\n\n\ndef get_total_energy(atoms: Atoms) -> float:\n    return atoms.get_potential_energy()\n\n\ndef chemspider_structure_download(chemical_name: str) -> Mol:\n    chemspider_api_key = environ.get(\"CHEMSPIDER_API_KEY\")\n    cs = ChemSpider(chemspider_api_key)\n    results = cs.search(chemical_name)\n    if not results:\n        return None\n    compound = results[0]\n    smiles = compound.smiles\n    mol = Chem.MolFromSmiles(smiles)\n    mol = Chem.AddHs(mol)\n    AllChem.EmbedMolecule(mol)\n\n    return mol\n\n\ndef gaussian_relaxation(atoms: Atoms, parameters: GaussianParameters) -> Atoms:\n    gaussian_keys = [\n        \"label\",\n        \"output_type\",\n        \"method\",\n        \"xc\",\n        \"basis\",\n        \"fitting_basis\",\n        \"charge\",\n        \"mult\",\n        \"basisfile\",\n        \"basis_set\",\n        \"extra\",\n        \"addsec\",\n        \"ioplist\",\n        \"spinlist\",\n        \"zefflist\",\n        \"qmomlist\",\n        \"nmagmlist\",\n        \"znuclist\",\n        \"radnuclearlist\",\n    ]\n    gaussian_dict = {\n        k: v\n        for k, v in parameters.dict(exclude_none=True).items()\n        if k in gaussian_keys\n    }\n    calc = Gaussian(**gaussian_dict)\n    atoms.set_calculator(calc)\n    dyn = BFGS(atoms)\n    dyn.run(parameters.fmax)\n\n    return atoms\n\n\n# Inputs Code\n\n\n\nclass StructureMetadata(BaseModel):\n    id: str | None = None\n    name: str | None = None\n    type: str | None = None\n    composition: str | None = None\n    description: str | None = None\n    vacuum_x: float | None = None\n    vacuum_y: float | None = None\n    vacuum_z: float | None = None\n    supercell: str | None = None\n    cas_number: str | None = None\n    orientation: str | None = None\n    lattice_a: float | None = None\n    lattice_b: float | None = None\n    lattice_c: float | None = None\n    orientation: str | None = None\n    mp_id: str | None = None\n\n\n\nclass GaussianParameters(BaseModel):\n    label: str | None = None\n    output_type: str | None = None\n    method: str | None = None\n    xc: str | None = None\n    basis: str | None = None\n    fitting_basis: str | None = None\n    charge: int | None = None\n    mult: int | None = None\n    basisfile: str | None = None\n    basis_set: str | None = None\n    extra: str | None = None\n    addsec: str | None = None\n    ioplist: list | None = None\n    spinlist: list | None = None\n    zefflist: list | None = None\n    qmomlist: list | None = None\n    nmagmlist: list | None = None\n    znuclist: list | None = None\n    radnuclearlist: list | None = None\n    fmax: float | None = 1e-5\n\nstructure_metadata_EDTA = StructureMetadata.parse_raw('{\"name\": \"Ethylenediaminetetraacetic acid\", \"type\": \"molecular\", \"composition\": \"C10H16N2O8\", \"description\": \"isolated molecule\", \"vacuum_x\": NaN, \"vacuum_y\": NaN, \"vacuum_z\": NaN, \"supercell\": NaN, \"cas_number\": NaN, \"lattice_a\": NaN, \"lattice_b\": NaN, \"lattice_c\": NaN, \"space group\": NaN, \"orientation\": NaN, \"mp_id\": NaN}')\n\nstructure_metadata_CA = StructureMetadata.parse_raw('{\"name\": \"Citric acid\", \"type\": \"molecular\", \"composition\": \"C6H8O7\", \"description\": \"isolated molecule\", \"vacuum_x\": NaN, \"vacuum_y\": NaN, \"vacuum_z\": NaN, \"supercell\": NaN, \"cas_number\": NaN, \"lattice_a\": NaN, \"lattice_b\": NaN, \"lattice_c\": NaN, \"space group\": NaN, \"orientation\": NaN, \"mp_id\": NaN}')\n\ngaussian_parameters_1 = GaussianParameters.parse_raw('{\"label\": NaN, \"output_type\": NaN, \"method\": NaN, \"xc\": \"B3LYP\", \"basis\": \"6-31+G*\", \"fitting_basis\": NaN, \"charge\": NaN, \"mult\": NaN, \"basisfile\": NaN, \"basis_set\": NaN, \"extra\": NaN, \"addsec\": NaN, \"ioplist\": NaN, \"spinlist\": NaN, \"zefflist\": NaN, \"qmomlist\": NaN, \"nmagmlist\": NaN, \"znuclist\": NaN, \"radnuclearlist\": NaN, \"fmax\": NaN}')\n\n# Execution Code\n\nlist_adsorbates = get_adsorbate_atoms_19cfde04326178dca8accd7996fb2a1a3a356396()\nedta_structure_mol = chemspider_structure_download(structure_metadata_EDTA)\nca_structure_mol = chemspider_structure_download(structure_metadata_CA)\nedta_atoms = rdkit_to_ase(edta_structure_mol)\nca_atoms = rdkit_to_ase(ca_structure_mol)\nedta_binding_sites = get_binding_positions_19cfde04326178dca8accd7996fb2a1a3a356396(edta_atoms)\nca_binding_sites = get_binding_positions_19cfde04326178dca8accd7996fb2a1a3a356396(ca_atoms)\nedta_complexes = []\nfor list_adsorbates_entry in list_adsorbates:\n    for edta_binding_sites_entry in edta_binding_sites:\n        edta_complexes_entry = add_adsorbate(edta_atoms, list_adsorbates_entry, edta_binding_sites_entry)\n        edta_complexes.append(edta_complexes_entry)\n\nca_complexes = []\nfor list_adsorbates_entry in list_adsorbates:\n    for ca_binding_sites_entry in ca_binding_sites:\n        ca_complexes_entry = add_adsorbate(ca_atoms, list_adsorbates_entry, ca_binding_sites_entry)\n        ca_complexes.append(ca_complexes_entry)\n\nrelaxed_edta_complexes = []\nfor edta_complexes_entry in edta_complexes:\n    relaxed_edta_complexes_entry = gaussian_relaxation(edta_complexes_entry, gaussian_parameters_1)\n    relaxed_edta_complexes.append(relaxed_edta_complexes_entry)\n\nrelaxed_ca_complexes = []\nfor ca_complexes_entry in ca_complexes:\n    relaxed_ca_complexes_entry = gaussian_relaxation(ca_complexes_entry, gaussian_parameters_1)\n    relaxed_ca_complexes.append(relaxed_ca_complexes_entry)\n\nrelaxaed_edta_energies = []\nfor relaxed_edta_complexes_entry in relaxed_edta_complexes:\n    relaxaed_edta_energies_entry = get_total_energy(relaxed_edta_complexes_entry)\n    relaxaed_edta_energies.append(relaxaed_edta_energies_entry)\n\nrelaxed_ca_energies = []\nfor relaxed_ca_complexes_entry in relaxed_ca_complexes:\n    relaxed_ca_energies_entry = get_total_energy(relaxed_ca_complexes_entry)\n    relaxed_ca_energies.append(relaxed_ca_energies_entry)\n\n", "record_id": "2023_09_22_1b00ed3a142a7a1b2582g"}