{"code": "from json import loads\n\nimport ase\nimport numpy as np\nfrom ase import Atoms\nfrom ase.dft import DOS\nfrom ase.optimize import BFGS\nfrom pydantic import BaseModel, Field\n\nfrom annotations.models.DFTParametersGeneral import DFTParametersGeneral\nfrom annotations.models.Position import Position\nfrom annotations.models.StructureMetadata import StructureMetadata\n\n# Functions Code\n\n\n\ndef charge_density_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(\n    atoms: Atoms,\n) -> dict:\n    pass\n\n\ndef structure_from_metadata(\n    metadata: StructureMetadata,\n) -> Atoms:\n    pass\n\n\n\n### Key maps\n\nvasp_map = {\n    \"exchange_correlation_functional\": \"xc\",\n    \"kpoints\": \"kpts\",\n    \"pseudopotentials\": \"pp\",\n    \"energy_cutoff\": \"encut\",\n    \"energy_convergence_criterion\": \"ediff\",\n}\n\ncrystal_map = {\n    \"exchange_correlation_functional\": \"xc\",\n    \"spin\": \"spinpol\"\n    \"basis_set\": \"basis\",\n    \"kpoints\": \"kpts\",\n    \"ase_otherkeys\": \"otherkeys\"\n}\n\ngaussian_map = {\n    \"exchange_correlation_functional\": \"xc\",\n    \"basis_set\": \"basis\",\n    \"ase_otherkeys\": \"extra\"\n}\n\nsiesta_map = {\n    \"exchange_correlation_functional\": \"xc\",\n    \"basis_set\": \"basis_set\",\n    \"kpoints\": \"kpts\",\n}\n\nqe_map = {\n    \"pseudopotentials\": \"pseudopotentials\",\n    \"kpoints\": \"kpts\",\n    \"ase_otherkeys\": \"input_data\",\n}\n\nmopac_map = {}\n\ncp2k_map = {\n    \"basis_set\": \"basis_set\",\n    \"energy_cutoff\": \"cutoff\",\n    \"exchange_correlation_functional\": \"xc\",\n    \"pseudopotentials\": \"pseudo_potential\",\n}\n\ndmol_map = {\n    \"basis_set\": \"basis\",\n    \"exchange_correlation_functional\": \"functional\",\n    \"energy_convergence_criterion\": \"scf_density_convergence\",\n    \"pseudopotentials\": \"pseudopotential\",\n    \"spin\": \"spin_polarization\",\n}\n\norca_map = {}\ngamess_map = {}\n\nkey_maps = {\"vasp\": vasp_map, \"crystal\": crystal_map, \"gaussian\": gaussian_map, \"siesta\": siesta_map, \"qe\": qe_map, \"mopac\": mopac_map, \"cp2k\": cp2k_map, \"dmol\": dmol_map, \"orca\": orca_map, \"gamess\": gamess_map}\n\n### Kwarg Lists\n\nase_vasp_kwargs = [\n    \"command\",\n    \"restart\",\n    \"xc\",\n    \"setups\",\n    \"pp\",\n    \"kpts\",\n    \"gamma\",\n    \"reciprocal\",\n    \"charge\",\n    \"prec\",\n    \"encut\",\n    \"ediff\",\n    \"nbands\",\n    \"algo\",\n    \"ismear\",\n    \"sigma\",\n    \"nelm\",\n]\n\ncrystal_kwargs = [\n    \"restart\",\n    \"xc\",\n    \"spinpol\",\n    \"guess\",\n    \"basis\",\n    \"kpts\",\n    \"isp\",\n    \"smearing\",\n    \"otherkeys\"\n]\n\ngaussian_kwargs = [\n    \"label\",\n    \"output_type\",\n    \"method\",\n    \"xc\",\n    \"basis\",\n    \"fitting_basis\",\n    \"charge\",\n    \"mult\",\n    \"basisfile\",\n    \"basis_set\",\n    \"extra\",\n    \"addsec\",\n    \"ioplist\",\n    \"spinlist\",\n    \"zefflist\",\n    \"qmomlist\",\n    \"nmagmlist\",\n    \"znuclist\",\n    \"radnuclearlist\",\n]\n\nsiesta_kwargs = [\n    \"label\",\n    \"mesh_cutoff\",\n    \"xc\",\n    \"energy_shift\",\n    \"kpts\",\n    \"basis_set\",\n    \"spin\",\n    \"species\",\n]\n\nqe_kwargs = [\"pseudopotentials\", \"kpts\", \"input_data\", \"kspacing\", \"koffset\"]\n\nmopac_kwargs = []\n\ncp2k_kwargs = [\n    \"auto_write\",\n    \"basis_set\",\n    \"basis_set_file\",\n    \"charge\",\n    \"command\",\n    \"cutoff\",\n    \"debug\",\n    \"force_eval_method\",\n    \"inp\",\n    \"options\",\n    \"max_scf\",\n    \"multiplicity\",\n    \"poisson_solver\",\n    \"potential_file\",\n    \"pseudo_potential\",\n    \"stress_tensor\",\n    \"uks\",\n    \"xc\",\n    \"print_level\",\n]\n\ndmol_kwargs = [\n    \"symmetry\",\n    \"spin_polarization\",\n    \"charge\",\n    \"basis\",\n    \"pseudopotential\",\n    \"functional\",\n    \"scf_density_convergence\",\n]\n\norca_kwargs = [\n    \"charge\",\n    \"mult\",\n    \"orcasimpleinput\",\n    \"orcablocks\",\n]\n\ngamess_kwargs = [\n    \"label\",\n    \"userscr\",\n    \"basis\",\n    \"ecp\",\n    \"exchange_correlation_functional\",\n    \"basis_set\",\n]\n\nase_kwarg_lists = {\"vasp\": ase_vasp_kwargs, \"crytsal\": crystal_kwargs, \"gaussian\": gaussian_kwargs, \"siesta\": siesta_kwargs, \"qe\": qe_kwargs, \"mopac\": mopac_kwargs, \"cp2k\": cp2k_kwargs, \"dmol\": dmol_kwargs, \"orca\": orca_kwargs, \"gamess\": gamess_kwargs}\n\n### Caluclators\n\nase_calculators = {\n    \"vasp\": ase.calculators.vasp.Vasp,\n    \"crystal\": ase.calculators.crystal.CRYSTAL,\n    \"gaussian\": ase.calculators.gaussian.Gaussian,\n    \"siesta\": ase.calculators.siesta.Siesta,\n    \"qe\": ase.calculators.espresso.Espresso,\n    \"mopac\": ase.calculators.mopac.MOPAC,\n    \"cp2k\": ase.calculators.cp2k.CP2K,\n    \"dmol\": ase.calculators.dmol.DMol3,\n    \"orca\": ase.calculators.orca.ORCA,\n    \"gamess\": ase.calculators.gamess_us.GAMESSUS,\n}\n\n\n### Setup Functions\n\n\ndef vasp_setup(input_kwargs: dict, dft_parameters: dict) -> dict:\n    hubbard_U_dict = dft_parameters.get(\"hubbard_U\")\n    if hubbard_U_dict is not None:\n        ldau_luj = {}\n        for element, u_value in hubbard_U_dict.items():\n            ldau_luj[element] = {\"L\": 2, \"U\": u_value, \"J\": 0}\n\n        ldau_params = {\n            \"LDAU\": True,\n            \"LDAUTYPE\": 2,\n            \"LDAUL\": [ldau_luj[element][\"L\"] for element in hubbard_U_dict.keys()],\n            \"LDAUU\": [ldau_luj[element][\"U\"] for element in hubbard_U_dict.keys()],\n            \"LDAUJ\": [ldau_luj[element][\"J\"] for element in hubbard_U_dict.keys()],\n        }\n\n        input_kwargs = {**input_kwargs, **ldau_params}\n\n    if dft_parameters.get(\"relaxed_nuclei\"):\n        input_kwargs[\"isif\"] = 2\n\n        if dft_parameters.get(\"relaxed_unit_cell\"):\n            input_kwargs[\"isif\"] = 3\n\n    else:\n        input_kwargs[\"ibrion\"] = -1\n\n    return input_kwargs\n\n\ndef siesta_setup(input_kwargs: dict, dft_parameters: dict) -> dict:\n    manually_set_spin = dft_parameters.get(\"other_information\").get(\"spin\") \n    if manually_set_spin is not None:\n        input_kwargs[\"spin\"] = manually_set_spin\n    elif dft_parameters.get(\"spin\"):\n        input_kwargs[\"spin\"] = \"spin-orbit\"\n    else:\n        input_kwargs[\"spin\"] = \"non-polarized\"\n\n    return input_kwargs\n\n\ndef qe_setup(input_kwargs: dict, dft_parameters: dict) -> dict:\n    input_data = input_kwargs.get(\"input_data\")\n    if input_data is None:\n        input_data = {}\n\n    input_data[\"system\"] = {\n        'ecutwfc': dft_parameters.get(\"energy_cutoff\"),\n        'input_dft': dft_parameters.get(\"exchange_correlation_functional\"),\n    }\n    input_data[\"control\"] = {\"convergence_threshold\": dft_parameters.get(\"energy_convergence_criterion\")}\n\n    if dft_parameters.get(\"hubbard_U\") is not None:\n        input_data[\"system\"][\"Hubbard_U\"] = dft_parameters.get(\"hubbard_U\")\n        input_data[\"system\"][\"lda_plus_u\"] = True\n\n    if dft_parameters.get(\"spin\"):\n        input_data[\"system\"][\"nspin\"] = 2\n\n    input_kwargs[\"input_data\"] = input_data\n\n    return input_kwargs\n        \n\ndef gamess_setup(input_kwargs: dict, dft_parameters: dict) -> dict:\n    contrl = {\"dfttyp\": dft_parameters[\"exchange_correlation_functional\"]}\n    basis = {\"gbasis\": dft_parameters[\"basis_set\"]}\n    if dft_parameters.get(\"tddft\") is not None:\n        contrl[\"tddft\"] = dft_parameters[\"tddft\"]\n    \n    input_kwargs = {\"contrl\": contrl, \"basis\": basis, **input_kwargs}\n\n    return input_kwargs\n\n\nsetup_functions = {\"vasp\": vasp_setup, \"siesta\": siesta_setup, \"qe\": qe_setup, \"gamess\": gamess_setup}\n\n\n### General Code\n\nJSON_FIELDS = [\"kpoints\", \"hubbard_U\", \"ase_otherkeys\", \"other_information\"]\n\n\ndef dft_general(atoms: Atoms, dft_parameters: DFTParametersGeneral):\n    # Convert from pydantic to dict\n    dft_dict = dft_parameters.dict()\n\n    # Convert json strings to dict\n    for field_name in JSON_FIELDS:\n        if field_name in dft_parameters.keys():\n            dft_dict[field_name] = loads(dft_parameters[field_name])\n\n    # Check to make sure the DFT code is supported by this function\n    code = dft_dict.get(\"code\")\n    if (\n        code is None\n        or code not in key_maps\n        or code not in ase_kwarg_lists\n        or code not in ase_calculators\n    ):\n        key_map_codes = set(key_maps.keys())\n        ase_kwarg_codes = set(ase_kwarg_lists.keys())\n        ase_calculator_codes = set(ase_calculators.keys())\n        supported_codes = key_map_codes.intersection(ase_calculator_codes).intersection(\n            ase_kwarg_codes\n        )\n        raise ValueError(\n            f\"DFT code name {code} is not suppported yet. Supported codes are: {str(supported_codes)}\"\n        )\n\n    # Replace general keys with code-specific keys.\n    key_map = key_maps[code]\n    specific_dft_dict = {}\n    for general_key_name, value in key_map.items():\n        specific_key_name = key_map.get(general_key_name)\n        if specific_key_name is None:\n            specific_dft_dict[general_key_name] = value\n        else:\n            specific_dft_dict[specific_key_name] = value\n\n    # Prepare the inputs to the ASE calculator's __init__ by only keeping keys that the ASE calculator will accept as kwargs\n    kwarg_list = ase_kwarg_lists[code]\n    specific_kwarg_input_dict = {\n        k: v\n        for k, v in specific_dft_dict.items()\n        if k in kwarg_list\n    }\n\n    # If dft-code-specific kwargs were entered into the sheet, include them here\n    additional_kwargs = dft_dict.get(\"other_information\")\n    if additional_kwargs is not None:\n        specific_kwarg_input_dict = {**specific_kwarg_input_dict, **additional_kwargs}\n\n    # If there is any dft-code-specific setup for the inputs dictionary remaining, do it here\n    setup_function = setup_functions.get(\"code\")\n    if setup_function is not None:\n        modified_input_dict = setup_function(\n            specific_kwarg_input_dict, specific_dft_dict\n        )\n    else:\n        modified_input_dict = specific_kwarg_input_dict\n\n    # Define and set the calculator\n    calculator = ase_calculators[code]\n    calc = calculator(**modified_input_dict)\n    atoms.set_calculator(calc)\n\n    # Run DFT\n    if dft_dict.get(\"relaxed_unit_cell\"):\n        dyn = BFGS(atoms)\n        dyn.run(dft_dict.get(\"force_convergence_criterion\"))\n    else:\n        atoms.get_potential_energy()\n\n    return atoms\n\n\ndef get_dos(atoms: Atoms) -> dict[str, list[float]]:\n    dos = DOS(atoms, width=0.1)\n    energies, weights = dos.get_energies(), dos.get_weights()\n    output = {\"energies\": energies, \"weights\": weights}\n\n    return output\n\n\ndef get_most_stable_structure(atoms_list: list[Atoms]) -> Atoms:\n    min_energy = atoms_list[0].get_potential_energy()\n    most_stable = atoms_list[0]\n    for atoms in atoms_list:\n        energy = atoms.get_potential_energy()\n        if energy < min_energy:\n            min_energy = energy\n            most_stable = atoms\n\n    return most_stable\n\n\ndef structure_modification_83728d84334c65a8b80a8cb07759d7303e89deec(\n    atoms: Atoms,\n) -> list[Atoms]:\n    pass\n\n\ndef get_total_energy(atoms: Atoms) -> float:\n    return atoms.get_potential_energy()\n\n\ndef diffusion_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(\n    atoms_list: list[Atoms],\n) -> dict:\n    pass\n\n\ndef get_band_structure(atoms: Atoms):\n    return atoms.calc.band_structure()\n\n\ndef get_reference_energy(atoms: Atoms) -> float:\n    pass\ndef get_adsorption_energy_float(system: float, bare: float, reference: float) -> float:\n    return system - bare - reference\n\n\ndef add_adsorbate(\n    surface_atoms: Atoms, adsorbate_atoms: Atoms, position: Position | None\n) -> Atoms:\n    if position is not None:\n        position_array = np.array([position.x, position.y, position.z])\n    else:\n        max_z = max([atom.z for atom in surface_atoms])\n        new_z = max_z + 1.5\n        position_array = np.array([0.0, 0.0, new_z])\n    adsorbate_atoms.positions += position_array\n    combined_atoms = surface_atoms + adsorbate_atoms\n\n    return combined_atoms\n\n\n# Inputs Code\n\n\n\nclass DFTParametersGeneral(BaseModel):\n    id: str | None\n    code: str | None\n    exchange_correlation_functional: str | None = Field(..., alias=\"functional\")\n    kpoints: str | None = Field(..., alias=\"k-points\")\n    pseudopotentials: str | None\n    basis_set: str | None\n    energy_cutoff: float | None\n    force_convergence_criterion: float | None = Field(..., alias=\"force_convergence\")\n    energy_convergence_criterion: float | None = Field(..., alias=\"energy_convergence\")\n    relaxed_nuclei: bool | None\n    relaxed_unit_cell: bool | None\n    spin: bool | None\n    hubbard_U: str | None\n    ase_otherkeys: str | None\n    other_information: str | None\n    notes: str | None\n\n\n\nclass StructureMetadataGeneral(BaseModel):\n    id: str | None\n    common_name: str | None\n    scientific_name: str | None\n    type: str | None\n    composition: str | None\n    crystal_or_isolated: str | None\n    vacuum: str | None\n    supercell: str | None\n    cas_number: str | None\n    lattice_parameters: str | None\n    space_group: str | None\n    mp_id: str | None\n    isomer: str | None\n    cell_size: str | None\n    miller_indices: str | None\n    crystal_structure: str | None\n    additional_information: str | None\n\nstructure_metadata_VO2 = StructureMetadataGeneral.parse_raw('{\"common_name\": \"Vanadium Oxide Monolayer\", \"scientific_name\": NaN, \"type\": \"surface\", \"composition\": \"VO2\", \"crystal_or_isolated\": \"surface\", \"vacuum\": \"[0,0,20]\", \"supercell\": \"[4,4,1]\", \"cell_size\": NaN, \"cas_number\": NaN, \"lattice_parameters\": \"[2.75, 2.75, 20]\", \"space_group\": NaN, \"mp_id\": NaN, \"isomer\": NaN, \"miller_indices\": NaN, \"crystal_structure\": NaN, \"additional_information\": NaN}')\n\ndft_params_27 = DFTParametersGeneral.parse_raw('{\"software\": \"vasp\", \"functional\": \"PBE\", \"k-points\": \"[5,5,1]\", \"pseudopotentials\": NaN, \"basis_set\": NaN, \"energy_cutoff\": 500.0, \"force_convergence\": 0.01, \"energy_convergence\": 0.0001, \"relaxed_nuclei\": NaN, \"relaxed_unit_cell\": NaN, \"spin\": NaN, \"hubbard_U\": NaN, \"ase_otherkeys\": NaN, \"other_information\": NaN, \"notes\": NaN}')\n\nstructure_metadata_Li = StructureMetadataGeneral.parse_raw('{\"common_name\": \"lithium atom\", \"scientific_name\": NaN, \"type\": \"isolated atom\", \"composition\": \"Li\", \"crystal_or_isolated\": \"atom\", \"vacuum\": NaN, \"supercell\": NaN, \"cell_size\": NaN, \"cas_number\": NaN, \"lattice_parameters\": NaN, \"space_group\": NaN, \"mp_id\": NaN, \"isomer\": NaN, \"miller_indices\": NaN, \"crystal_structure\": NaN, \"additional_information\": \"just one isolated atom, to be added as an adsorbate\"}')\n\nstructure_metadata_Na = StructureMetadataGeneral.parse_raw('{\"common_name\": \"sodium atom\", \"scientific_name\": NaN, \"type\": \"isolated atom\", \"composition\": \"Na\", \"crystal_or_isolated\": \"atom\", \"vacuum\": NaN, \"supercell\": NaN, \"cell_size\": NaN, \"cas_number\": NaN, \"lattice_parameters\": NaN, \"space_group\": NaN, \"mp_id\": NaN, \"isomer\": NaN, \"miller_indices\": NaN, \"crystal_structure\": NaN, \"additional_information\": \"just one isolated atom, to be added as an adsorbate\"}')\n\nstructure_metadata_Mg = StructureMetadataGeneral.parse_raw('{\"common_name\": {\"structure_metadata_Mg\": \"magnesium atom\"}, \"scientific_name\": {\"structure_metadata_Mg\": NaN}, \"type\": {\"structure_metadata_Mg\": \"isolated atom\"}, \"composition\": {\"structure_metadata_Mg\": \"Mg\"}, \"crystal_or_isolated\": {\"structure_metadata_Mg\": \"atom\"}, \"vacuum\": {\"structure_metadata_Mg\": NaN}, \"supercell\": {\"structure_metadata_Mg\": NaN}, \"cell_size\": {\"structure_metadata_Mg\": NaN}, \"cas_number\": {\"structure_metadata_Mg\": NaN}, \"lattice_parameters\": {\"structure_metadata_Mg\": NaN}, \"space_group\": {\"structure_metadata_Mg\": NaN}, \"mp_id\": {\"structure_metadata_Mg\": NaN}, \"isomer\": {\"structure_metadata_Mg\": NaN}, \"miller_indices\": {\"structure_metadata_Mg\": NaN}, \"crystal_structure\": {\"structure_metadata_Mg\": NaN}, \"additional_information\": {\"structure_metadata_Mg\": \"just one isolated atom, to be added as an adsorbate\"}}')\n\nstructure_metadata_K = StructureMetadataGeneral.parse_raw('{\"common_name\": \"potassium atom\", \"scientific_name\": NaN, \"type\": \"isolated atom\", \"composition\": \"K\", \"crystal_or_isolated\": \"atom\", \"vacuum\": NaN, \"supercell\": NaN, \"cell_size\": NaN, \"cas_number\": NaN, \"lattice_parameters\": NaN, \"space_group\": NaN, \"mp_id\": NaN, \"isomer\": NaN, \"miller_indices\": NaN, \"crystal_structure\": NaN, \"additional_information\": \"just one isolated atom, to be added as an adsorbate\"}')\n\nstructure_metadata_Ca = StructureMetadataGeneral.parse_raw('{\"common_name\": \"calcium atom\", \"scientific_name\": NaN, \"type\": \"isolated atom\", \"composition\": \"Ca\", \"crystal_or_isolated\": \"atom\", \"vacuum\": NaN, \"supercell\": NaN, \"cell_size\": NaN, \"cas_number\": NaN, \"lattice_parameters\": NaN, \"space_group\": NaN, \"mp_id\": NaN, \"isomer\": NaN, \"miller_indices\": NaN, \"crystal_structure\": NaN, \"additional_information\": \"just one isolated atom, to be added as an adsorbate\"}')\n\n# Execution Code\n\natoms_VO2 = structure_from_metadata(structure_metadata_VO2)\natoms_Li = structure_from_metadata(structure_metadata_Li)\natoms_Na = structure_from_metadata(structure_metadata_Na)\natoms_Mg = structure_from_metadata(structure_metadata_Mg)\natoms_K = structure_from_metadata(structure_metadata_K)\natoms_Ca = structure_from_metadata(structure_metadata_Ca)\nrelaxed_atoms_VO2 = dft_general(atoms_VO2, dft_params_27)\natoms_VO2_Li = add_adsorbate(atoms_VO2, atoms_Li)\nenergy_Li = get_reference_energy(atoms_Li)\natoms_VO2_Na = add_adsorbate(atoms_VO2, atoms_Na)\nenergy_Na = get_reference_energy(atoms_Na)\natoms_VO2_Mg = add_adsorbate(atoms_VO2, atoms_Mg)\nenergy_Mg = get_reference_energy(atoms_Mg)\natoms_VO2_K = add_adsorbate(atoms_VO2, atoms_K)\nenergy_K = get_reference_energy(atoms_K)\natoms_VO2_Ca = add_adsorbate(atoms_VO2, atoms_Ca)\nenergy_Ca = get_reference_energy(atoms_Ca)\nVO2_dos = get_dos(relaxed_atoms_VO2)\nVO2_band_structure = get_band_structure(relaxed_atoms_VO2)\nVO2_energy = get_total_energy(relaxed_atoms_VO2)\natoms_VO2_Li_list = structure_modification_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Li)\natoms_VO2_Na_list = structure_modification_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Na)\natoms_VO2_Mg_list = structure_modification_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Mg)\natoms_VO2_K_list = structure_modification_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_K)\natoms_VO2_Ca_list = structure_modification_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Ca)\natoms_VO2_Li_list_relaxed = []\nfor atoms_VO2_Li_list_entry in atoms_VO2_Li_list:\n    atoms_VO2_Li_list_relaxed_entry = dft_general(atoms_VO2_Li_list_entry, dft_params_27)\n    atoms_VO2_Li_list_relaxed.append(atoms_VO2_Li_list_relaxed_entry)\n\nLi_diffusion_barrier = diffusion_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Li_list)\natoms_VO2_Na_list_relaxed = []\nfor atoms_VO2_Na_list_entry in atoms_VO2_Na_list:\n    atoms_VO2_Na_list_relaxed_entry = dft_general(atoms_VO2_Na_list_entry, dft_params_27)\n    atoms_VO2_Na_list_relaxed.append(atoms_VO2_Na_list_relaxed_entry)\n\nNa_diffusion_barrier = diffusion_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Na_list)\natoms_VO2_Mg_list_relaxed = []\nfor atoms_VO2_Mg_list_entry in atoms_VO2_Mg_list:\n    atoms_VO2_Mg_list_relaxed_entry = dft_general(atoms_VO2_Mg_list_entry, dft_params_27)\n    atoms_VO2_Mg_list_relaxed.append(atoms_VO2_Mg_list_relaxed_entry)\n\nMg_diffusion_barrier = diffusion_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Mg_list)\natoms_VO2_K_list_relaxed = []\nfor atoms_VO2_K_list_entry in atoms_VO2_K_list:\n    atoms_VO2_K_list_relaxed_entry = dft_general(atoms_VO2_K_list_entry, dft_params_27)\n    atoms_VO2_K_list_relaxed.append(atoms_VO2_K_list_relaxed_entry)\n\nK_diffusion_barrier = diffusion_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_K_list)\natoms_VO2_Ca_list_relaxed = []\nfor atoms_VO2_Ca_list_entry in atoms_VO2_Ca_list:\n    atoms_VO2_Ca_list_relaxed_entry = dft_general(atoms_VO2_Ca_list_entry, dft_params_27)\n    atoms_VO2_Ca_list_relaxed.append(atoms_VO2_Ca_list_relaxed_entry)\n\nCa_diffusion_barrier = diffusion_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Ca_list)\natoms_VO2_Li_stable = get_most_stable_structure(atoms_VO2_Li_list_relaxed)\natoms_VO2_Na_stable = get_most_stable_structure(atoms_VO2_Na_list_relaxed)\natoms_VO2_Mg_stable = get_most_stable_structure(atoms_VO2_Mg_list_relaxed)\natoms_VO2_K_stable = get_most_stable_structure(atoms_VO2_K_list_relaxed)\natoms_VO2_Ca_stable = get_most_stable_structure(atoms_VO2_Ca_list_relaxed)\nLi_system_energy = get_total_energy(atoms_VO2_Li_stable)\nLi_charge_density_results = charge_density_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Li_stable)\nNa_system_energy = get_total_energy(atoms_VO2_Na_stable)\nNa_charge_density_results = charge_density_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Na_stable)\nMg_system_energy = get_total_energy(atoms_VO2_Mg_stable)\nMg_charge_density_results = charge_density_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Mg_stable)\nK_system_energy = get_total_energy(atoms_VO2_K_stable)\nK_charge_density_results = charge_density_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_K_stable)\nCa_system_energy = get_total_energy(atoms_VO2_Ca_stable)\nCa_charge_density_results = charge_density_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Ca_stable)\nads_energy_Li = get_adsorption_energy_float(Li_system_energy, VO2_energy, energy_Li)\nads_energy_Na = get_adsorption_energy_float(Na_system_energy, VO2_energy, energy_Na)\nads_energy_Mg = get_adsorption_energy_float(Mg_system_energy, VO2_energy, energy_Mg)\nads_energy_K = get_adsorption_energy_float(K_system_energy, VO2_energy, energy_K)\nads_energy_Ca = get_adsorption_energy_float(Ca_system_energy, VO2_energy, energy_Ca)\n", "graph_as_text": "[{\"description\": \"takes in metadata about a structure and returns the structure or list of structures as ASE atoms objects\", \"function_id\": \"process_184\", \"function_name\": \"structure_from_metadata\", \"input_types\": [\"StructureMetadataGeneral\"], \"inputs\": [\"structure_metadata_VO2\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"atoms_VO2\"], \"process_type\": \"structure_generation\"}, {\"description\": \"takes in metadata about a structure and returns the structure or list of structures as ASE atoms objects\", \"function_id\": \"process_189\", \"function_name\": \"structure_from_metadata\", \"input_types\": [\"StructureMetadataGeneral\"], \"inputs\": [\"structure_metadata_Li\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"atoms_Li\"], \"process_type\": \"structure_generation\"}, {\"description\": \"takes in metadata about a structure and returns the structure or list of structures as ASE atoms objects\", \"function_id\": \"process_199\", \"function_name\": \"structure_from_metadata\", \"input_types\": [\"StructureMetadataGeneral\"], \"inputs\": [\"structure_metadata_Na\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"atoms_Na\"], \"process_type\": \"structure_generation\"}, {\"description\": \"takes in metadata about a structure and returns the structure or list of structures as ASE atoms objects\", \"function_id\": \"process_209\", \"function_name\": \"structure_from_metadata\", \"input_types\": [\"StructureMetadataGeneral\"], \"inputs\": [\"structure_metadata_Mg\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"atoms_Mg\"], \"process_type\": \"structure_generation\"}, {\"description\": \"takes in metadata about a structure and returns the structure or list of structures as ASE atoms objects\", \"function_id\": \"process_219\", \"function_name\": \"structure_from_metadata\", \"input_types\": [\"StructureMetadataGeneral\"], \"inputs\": [\"structure_metadata_K\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"atoms_K\"], \"process_type\": \"structure_generation\"}, {\"description\": \"takes in metadata about a structure and returns the structure or list of structures as ASE atoms objects\", \"function_id\": \"process_229\", \"function_name\": \"structure_from_metadata\", \"input_types\": [\"StructureMetadataGeneral\"], \"inputs\": [\"structure_metadata_Ca\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"atoms_Ca\"], \"process_type\": \"structure_generation\"}, {\"description\": \"takes in generic DFT parameters and runs a DFT calculation\", \"function_id\": \"process_185\", \"function_name\": \"dft_general\", \"input_types\": [\"Atoms\", \"DFTParametersGeneral\"], \"inputs\": [\"atoms_VO2\", \"dft_params_27\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"relaxed_atoms_VO2\"], \"process_type\": \"dft\"}, {\"description\": \"takes the first set of atoms and places the second set of atoms at the position described in the final argument\", \"function_id\": \"process_190\", \"function_name\": \"add_adsorbate\", \"input_types\": [\"Atoms\", \"Atoms\"], \"inputs\": [\"atoms_VO2\", \"atoms_Li\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"atoms_VO2_Li\"], \"process_type\": \"structure_generation\"}, {\"description\": \"returns the reference energy for a given atoms object\", \"function_id\": \"process_195\", \"function_name\": \"get_reference_energy\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_Li\"], \"output_types\": [\"float\"], \"outputs\": [\"energy_Li\"], \"process_type\": \"analysis\"}, {\"description\": \"takes the first set of atoms and places the second set of atoms at the position described in the final argument\", \"function_id\": \"process_200\", \"function_name\": \"add_adsorbate\", \"input_types\": [\"Atoms\", \"Atoms\"], \"inputs\": [\"atoms_VO2\", \"atoms_Na\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"atoms_VO2_Na\"], \"process_type\": \"structure_generation\"}, {\"description\": \"returns the reference energy for a given atoms object\", \"function_id\": \"process_205\", \"function_name\": \"get_reference_energy\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_Na\"], \"output_types\": [\"float\"], \"outputs\": [\"energy_Na\"], \"process_type\": \"analysis\"}, {\"description\": \"takes the first set of atoms and places the second set of atoms at the position described in the final argument\", \"function_id\": \"process_210\", \"function_name\": \"add_adsorbate\", \"input_types\": [\"Atoms\", \"Atoms\"], \"inputs\": [\"atoms_VO2\", \"atoms_Mg\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"atoms_VO2_Mg\"], \"process_type\": \"structure_generation\"}, {\"description\": \"returns the reference energy for a given atoms object\", \"function_id\": \"process_215\", \"function_name\": \"get_reference_energy\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_Mg\"], \"output_types\": [\"float\"], \"outputs\": [\"energy_Mg\"], \"process_type\": \"analysis\"}, {\"description\": \"takes the first set of atoms and places the second set of atoms at the position described in the final argument\", \"function_id\": \"process_220\", \"function_name\": \"add_adsorbate\", \"input_types\": [\"Atoms\", \"Atoms\"], \"inputs\": [\"atoms_VO2\", \"atoms_K\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"atoms_VO2_K\"], \"process_type\": \"structure_generation\"}, {\"description\": \"returns the reference energy for a given atoms object\", \"function_id\": \"process_225\", \"function_name\": \"get_reference_energy\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_K\"], \"output_types\": [\"float\"], \"outputs\": [\"energy_K\"], \"process_type\": \"analysis\"}, {\"description\": \"takes the first set of atoms and places the second set of atoms at the position described in the final argument\", \"function_id\": \"process_230\", \"function_name\": \"add_adsorbate\", \"input_types\": [\"Atoms\", \"Atoms\"], \"inputs\": [\"atoms_VO2\", \"atoms_Ca\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"atoms_VO2_Ca\"], \"process_type\": \"structure_generation\"}, {\"description\": \"returns the reference energy for a given atoms object\", \"function_id\": \"process_235\", \"function_name\": \"get_reference_energy\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_Ca\"], \"output_types\": [\"float\"], \"outputs\": [\"energy_Ca\"], \"process_type\": \"analysis\"}, {\"description\": \"gets the energies and weights for the DOS from an ase atoms object\", \"function_id\": \"process_186\", \"function_name\": \"get_dos\", \"input_types\": [\"Atoms\"], \"inputs\": [\"relaxed_atoms_VO2\"], \"output_types\": [\"dict\"], \"outputs\": [\"VO2_dos\"], \"process_type\": \"analysis\"}, {\"description\": \"gets the band structure from an ase atoms object after DFT has been run\", \"function_id\": \"process_187\", \"function_name\": \"get_band_structure\", \"input_types\": [\"Atoms\"], \"inputs\": [\"relaxed_atoms_VO2\"], \"output_types\": [\"dict\"], \"outputs\": [\"VO2_band_structure\"], \"process_type\": \"analysis\"}, {\"description\": \"returns the total energy as a float from the input ase atoms object\", \"function_id\": \"process_188\", \"function_name\": \"get_total_energy\", \"input_types\": [\"Atoms\"], \"inputs\": [\"relaxed_atoms_VO2\"], \"output_types\": [\"float\"], \"outputs\": [\"VO2_energy\"], \"process_type\": \"analysis\"}, {\"description\": \"takes in the starting structure, and creates a list of similar structures with the adsorbate in different binding sites\", \"function_id\": \"process_191\", \"function_name\": \"structure_modification_83728d84334c65a8b80a8cb07759d7303e89deec\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_VO2_Li\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"atoms_VO2_Li_list\"], \"process_type\": \"structure_generation\"}, {\"description\": \"takes in the starting structure, and creates a list of similar structures with the adsorbate in different binding sites\", \"function_id\": \"process_201\", \"function_name\": \"structure_modification_83728d84334c65a8b80a8cb07759d7303e89deec\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_VO2_Na\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"atoms_VO2_Na_list\"], \"process_type\": \"structure_generation\"}, {\"description\": \"takes in the starting structure, and creates a list of similar structures with the adsorbate in different binding sites\", \"function_id\": \"process_211\", \"function_name\": \"structure_modification_83728d84334c65a8b80a8cb07759d7303e89deec\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_VO2_Mg\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"atoms_VO2_Mg_list\"], \"process_type\": \"structure_generation\"}, {\"description\": \"takes in the starting structure, and creates a list of similar structures with the adsorbate in different binding sites\", \"function_id\": \"process_221\", \"function_name\": \"structure_modification_83728d84334c65a8b80a8cb07759d7303e89deec\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_VO2_K\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"atoms_VO2_K_list\"], \"process_type\": \"structure_generation\"}, {\"description\": \"takes in the starting structure, and creates a list of similar structures with the adsorbate in different binding sites\", \"function_id\": \"process_231\", \"function_name\": \"structure_modification_83728d84334c65a8b80a8cb07759d7303e89deec\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_VO2_Ca\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"atoms_VO2_Ca_list\"], \"process_type\": \"structure_generation\"}, {\"description\": \"takes in generic DFT parameters and runs a DFT calculation\", \"function_id\": \"process_192\", \"function_name\": \"dft_general\", \"input_types\": [\"list[Atoms]\", \"DFTParametersGeneral\"], \"inputs\": [\"atoms_VO2_Li_list\", \"dft_params_27\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"atoms_VO2_Li_list_relaxed\"], \"process_type\": \"dft\"}, {\"description\": \"determines the reaction barriers amongst a list of atoms objects\", \"function_id\": \"process_198\", \"function_name\": \"diffusion_analysis_83728d84334c65a8b80a8cb07759d7303e89deec\", \"input_types\": [\"list[Atoms]\"], \"inputs\": [\"atoms_VO2_Li_list\"], \"output_types\": [\"dict\"], \"outputs\": [\"Li_diffusion_barrier\"], \"process_type\": \"analysis\"}, {\"description\": \"takes in generic DFT parameters and runs a DFT calculation\", \"function_id\": \"process_202\", \"function_name\": \"dft_general\", \"input_types\": [\"list[Atoms]\", \"DFTParametersGeneral\"], \"inputs\": [\"atoms_VO2_Na_list\", \"dft_params_27\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"atoms_VO2_Na_list_relaxed\"], \"process_type\": \"dft\"}, {\"description\": \"determines the reaction barriers amongst a list of atoms objects\", \"function_id\": \"process_208\", \"function_name\": \"diffusion_analysis_83728d84334c65a8b80a8cb07759d7303e89deec\", \"input_types\": [\"list[Atoms]\"], \"inputs\": [\"atoms_VO2_Na_list\"], \"output_types\": [\"dict\"], \"outputs\": [\"Na_diffusion_barrier\"], \"process_type\": \"analysis\"}, {\"description\": \"takes in generic DFT parameters and runs a DFT calculation\", \"function_id\": \"process_212\", \"function_name\": \"dft_general\", \"input_types\": [\"list[Atoms]\", \"DFTParametersGeneral\"], \"inputs\": [\"atoms_VO2_Mg_list\", \"dft_params_27\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"atoms_VO2_Mg_list_relaxed\"], \"process_type\": \"dft\"}, {\"description\": \"determines the reaction barriers amongst a list of atoms objects\", \"function_id\": \"process_218\", \"function_name\": \"diffusion_analysis_83728d84334c65a8b80a8cb07759d7303e89deec\", \"input_types\": [\"list[Atoms]\"], \"inputs\": [\"atoms_VO2_Mg_list\"], \"output_types\": [\"dict\"], \"outputs\": [\"Mg_diffusion_barrier\"], \"process_type\": \"analysis\"}, {\"description\": \"takes in generic DFT parameters and runs a DFT calculation\", \"function_id\": \"process_222\", \"function_name\": \"dft_general\", \"input_types\": [\"list[Atoms]\", \"DFTParametersGeneral\"], \"inputs\": [\"atoms_VO2_K_list\", \"dft_params_27\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"atoms_VO2_K_list_relaxed\"], \"process_type\": \"dft\"}, {\"description\": \"determines the reaction barriers amongst a list of atoms objects\", \"function_id\": \"process_228\", \"function_name\": \"diffusion_analysis_83728d84334c65a8b80a8cb07759d7303e89deec\", \"input_types\": [\"list[Atoms]\"], \"inputs\": [\"atoms_VO2_K_list\"], \"output_types\": [\"dict\"], \"outputs\": [\"K_diffusion_barrier\"], \"process_type\": \"analysis\"}, {\"description\": \"takes in generic DFT parameters and runs a DFT calculation\", \"function_id\": \"process_232\", \"function_name\": \"dft_general\", \"input_types\": [\"list[Atoms]\", \"DFTParametersGeneral\"], \"inputs\": [\"atoms_VO2_Ca_list\", \"dft_params_27\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"atoms_VO2_Ca_list_relaxed\"], \"process_type\": \"dft\"}, {\"description\": \"determines the reaction barriers amongst a list of atoms objects\", \"function_id\": \"process_238\", \"function_name\": \"diffusion_analysis_83728d84334c65a8b80a8cb07759d7303e89deec\", \"input_types\": [\"list[Atoms]\"], \"inputs\": [\"atoms_VO2_Ca_list\"], \"output_types\": [\"dict\"], \"outputs\": [\"Ca_diffusion_barrier\"], \"process_type\": \"analysis\"}, {\"description\": \"returns the most stable structure given a list of atoms objects that already have their potential energy stored on them (DFT has already been run)\", \"function_id\": \"process_193\", \"function_name\": \"get_most_stable_structure\", \"input_types\": [\"list[Atoms]\"], \"inputs\": [\"atoms_VO2_Li_list_relaxed\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"atoms_VO2_Li_stable\"], \"process_type\": \"analysis\"}, {\"description\": \"returns the most stable structure given a list of atoms objects that already have their potential energy stored on them (DFT has already been run)\", \"function_id\": \"process_203\", \"function_name\": \"get_most_stable_structure\", \"input_types\": [\"list[Atoms]\"], \"inputs\": [\"atoms_VO2_Na_list_relaxed\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"atoms_VO2_Na_stable\"], \"process_type\": \"analysis\"}, {\"description\": \"returns the most stable structure given a list of atoms objects that already have their potential energy stored on them (DFT has already been run)\", \"function_id\": \"process_213\", \"function_name\": \"get_most_stable_structure\", \"input_types\": [\"list[Atoms]\"], \"inputs\": [\"atoms_VO2_Mg_list_relaxed\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"atoms_VO2_Mg_stable\"], \"process_type\": \"analysis\"}, {\"description\": \"returns the most stable structure given a list of atoms objects that already have their potential energy stored on them (DFT has already been run)\", \"function_id\": \"process_223\", \"function_name\": \"get_most_stable_structure\", \"input_types\": [\"list[Atoms]\"], \"inputs\": [\"atoms_VO2_K_list_relaxed\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"atoms_VO2_K_stable\"], \"process_type\": \"analysis\"}, {\"description\": \"returns the most stable structure given a list of atoms objects that already have their potential energy stored on them (DFT has already been run)\", \"function_id\": \"process_233\", \"function_name\": \"get_most_stable_structure\", \"input_types\": [\"list[Atoms]\"], \"inputs\": [\"atoms_VO2_Ca_list_relaxed\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"atoms_VO2_Ca_stable\"], \"process_type\": \"analysis\"}, {\"description\": \"returns the total energy as a float from the input ase atoms object\", \"function_id\": \"process_194\", \"function_name\": \"get_total_energy\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_VO2_Li_stable\"], \"output_types\": [\"float\"], \"outputs\": [\"Li_system_energy\"], \"process_type\": \"analysis\"}, {\"description\": \"returns the charge on each atom and the number of electrons injected into the surface from the adsorbates\", \"function_id\": \"process_197\", \"function_name\": \"charge_density_analysis_83728d84334c65a8b80a8cb07759d7303e89deec\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_VO2_Li_stable\"], \"output_types\": [\"dict\"], \"outputs\": [\"Li_charge_density_results\"], \"process_type\": \"analysis\"}, {\"description\": \"returns the total energy as a float from the input ase atoms object\", \"function_id\": \"process_204\", \"function_name\": \"get_total_energy\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_VO2_Na_stable\"], \"output_types\": [\"float\"], \"outputs\": [\"Na_system_energy\"], \"process_type\": \"analysis\"}, {\"description\": \"returns the charge on each atom and the number of electrons injected into the surface from the adsorbates\", \"function_id\": \"process_207\", \"function_name\": \"charge_density_analysis_83728d84334c65a8b80a8cb07759d7303e89deec\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_VO2_Na_stable\"], \"output_types\": [\"dict\"], \"outputs\": [\"Na_charge_density_results\"], \"process_type\": \"analysis\"}, {\"description\": \"returns the total energy as a float from the input ase atoms object\", \"function_id\": \"process_214\", \"function_name\": \"get_total_energy\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_VO2_Mg_stable\"], \"output_types\": [\"float\"], \"outputs\": [\"Mg_system_energy\"], \"process_type\": \"analysis\"}, {\"description\": \"returns the charge on each atom and the number of electrons injected into the surface from the adsorbates\", \"function_id\": \"process_217\", \"function_name\": \"charge_density_analysis_83728d84334c65a8b80a8cb07759d7303e89deec\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_VO2_Mg_stable\"], \"output_types\": [\"dict\"], \"outputs\": [\"Mg_charge_density_results\"], \"process_type\": \"analysis\"}, {\"description\": \"returns the total energy as a float from the input ase atoms object\", \"function_id\": \"process_224\", \"function_name\": \"get_total_energy\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_VO2_K_stable\"], \"output_types\": [\"float\"], \"outputs\": [\"K_system_energy\"], \"process_type\": \"analysis\"}, {\"description\": \"returns the charge on each atom and the number of electrons injected into the surface from the adsorbates\", \"function_id\": \"process_227\", \"function_name\": \"charge_density_analysis_83728d84334c65a8b80a8cb07759d7303e89deec\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_VO2_K_stable\"], \"output_types\": [\"dict\"], \"outputs\": [\"K_charge_density_results\"], \"process_type\": \"analysis\"}, {\"description\": \"returns the total energy as a float from the input ase atoms object\", \"function_id\": \"process_234\", \"function_name\": \"get_total_energy\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_VO2_Ca_stable\"], \"output_types\": [\"float\"], \"outputs\": [\"Ca_system_energy\"], \"process_type\": \"analysis\"}, {\"description\": \"returns the charge on each atom and the number of electrons injected into the surface from the adsorbates\", \"function_id\": \"process_237\", \"function_name\": \"charge_density_analysis_83728d84334c65a8b80a8cb07759d7303e89deec\", \"input_types\": [\"Atoms\"], \"inputs\": [\"atoms_VO2_Ca_stable\"], \"output_types\": [\"dict\"], \"outputs\": [\"Ca_charge_density_results\"], \"process_type\": \"analysis\"}, {\"description\": \"gets the adorption energy (system - slab - reference) given the energies as floats\", \"function_id\": \"process_196\", \"function_name\": \"get_adsorption_energy_float\", \"input_types\": [\"float\", \"float\", \"float\"], \"inputs\": [\"Li_system_energy\", \"VO2_energy\", \"energy_Li\"], \"output_types\": [\"float\"], \"outputs\": [\"ads_energy_Li\"], \"process_type\": \"analysis\"}, {\"description\": \"gets the adorption energy (system - slab - reference) given the energies as floats\", \"function_id\": \"process_206\", \"function_name\": \"get_adsorption_energy_float\", \"input_types\": [\"float\", \"float\", \"float\"], \"inputs\": [\"Na_system_energy\", \"VO2_energy\", \"energy_Na\"], \"output_types\": [\"float\"], \"outputs\": [\"ads_energy_Na\"], \"process_type\": \"analysis\"}, {\"description\": \"gets the adorption energy (system - slab - reference) given the energies as floats\", \"function_id\": \"process_216\", \"function_name\": \"get_adsorption_energy_float\", \"input_types\": [\"float\", \"float\", \"float\"], \"inputs\": [\"Mg_system_energy\", \"VO2_energy\", \"energy_Mg\"], \"output_types\": [\"float\"], \"outputs\": [\"ads_energy_Mg\"], \"process_type\": \"analysis\"}, {\"description\": \"gets the adorption energy (system - slab - reference) given the energies as floats\", \"function_id\": \"process_226\", \"function_name\": \"get_adsorption_energy_float\", \"input_types\": [\"float\", \"float\", \"float\"], \"inputs\": [\"K_system_energy\", \"VO2_energy\", \"energy_K\"], \"output_types\": [\"float\"], \"outputs\": [\"ads_energy_K\"], \"process_type\": \"analysis\"}, {\"description\": \"gets the adorption energy (system - slab - reference) given the energies as floats\", \"function_id\": \"process_236\", \"function_name\": \"get_adsorption_energy_float\", \"input_types\": [\"float\", \"float\", \"float\"], \"inputs\": [\"Ca_system_energy\", \"VO2_energy\", \"energy_Ca\"], \"output_types\": [\"float\"], \"outputs\": [\"ads_energy_Ca\"], \"process_type\": \"analysis\"}]", "no_header_code": "import numpy as np\nfrom ase import Atoms\nfrom ase.dft import DOS\nfrom pydantic import BaseModel, Field\n\nfrom annotations.functions.dft_general import dft_general\nfrom annotations.models.Position import Position\nfrom annotations.models.StructureMetadata import StructureMetadata\n\n# Functions Code\n\n\n\ndef structure_modification_83728d84334c65a8b80a8cb07759d7303e89deec(\n    atoms: Atoms,\n) -> list[Atoms]:\n    pass\n\n\ndef diffusion_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(\n    atoms_list: list[Atoms],\n) -> dict:\n    pass\n\n\ndef get_reference_energy(atoms: Atoms) -> float:\n    pass\n\n\ndef get_dos(atoms: Atoms) -> dict[str, list[float]]:\n    dos = DOS(atoms, width=0.1)\n    energies, weights = dos.get_energies(), dos.get_weights()\n    output = {\"energies\": energies, \"weights\": weights}\n\n    return output\n\n\ndef structure_from_metadata(\n    metadata: StructureMetadata,\n) -> Atoms:\n    pass\n\n\ndef get_most_stable_structure(atoms_list: list[Atoms]) -> Atoms:\n    min_energy = atoms_list[0].get_potential_energy()\n    most_stable = atoms_list[0]\n    for atoms in atoms_list:\n        energy = atoms.get_potential_energy()\n        if energy < min_energy:\n            min_energy = energy\n            most_stable = atoms\n\n    return most_stable\n\n\ndef add_adsorbate(\n    surface_atoms: Atoms, adsorbate_atoms: Atoms, position: Position | None\n) -> Atoms:\n    if position is not None:\n        position_array = np.array([position.x, position.y, position.z])\n    else:\n        max_z = max([atom.z for atom in surface_atoms])\n        new_z = max_z + 1.5\n        position_array = np.array([0.0, 0.0, new_z])\n    adsorbate_atoms.positions += position_array\n    combined_atoms = surface_atoms + adsorbate_atoms\n\n    return combined_atoms\ndef get_adsorption_energy_float(system: float, bare: float, reference: float) -> float:\n    return system - bare - reference\n\n\ndef get_total_energy(atoms: Atoms) -> float:\n    return atoms.get_potential_energy()\n\n\ndef charge_density_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(\n    atoms: Atoms,\n) -> dict:\n    pass\n\n\n\ndef get_band_structure(atoms: Atoms):\n    return atoms.calc.band_structure()\n\n\n# Inputs Code\n\n\n\nclass DFTParametersGeneral(BaseModel):\n    id: str | None\n    code: str | None\n    exchange_correlation_functional: str | None = Field(..., alias=\"functional\")\n    kpoints: str | None = Field(..., alias=\"k-points\")\n    pseudopotentials: str | None\n    basis_set: str | None\n    energy_cutoff: float | None\n    force_convergence_criterion: float | None = Field(..., alias=\"force_convergence\")\n    energy_convergence_criterion: float | None = Field(..., alias=\"energy_convergence\")\n    relaxed_nuclei: bool | None\n    relaxed_unit_cell: bool | None\n    spin: bool | None\n    hubbard_U: str | None\n    ase_otherkeys: str | None\n    other_information: str | None\n    notes: str | None\n\n\n\nclass StructureMetadataGeneral(BaseModel):\n    id: str | None\n    common_name: str | None\n    scientific_name: str | None\n    type: str | None\n    composition: str | None\n    crystal_or_isolated: str | None\n    vacuum: str | None\n    supercell: str | None\n    cas_number: str | None\n    lattice_parameters: str | None\n    space_group: str | None\n    mp_id: str | None\n    isomer: str | None\n    cell_size: str | None\n    miller_indices: str | None\n    crystal_structure: str | None\n    additional_information: str | None\n\nstructure_metadata_VO2 = StructureMetadataGeneral.parse_raw('{\"common_name\": \"Vanadium Oxide Monolayer\", \"scientific_name\": NaN, \"type\": \"surface\", \"composition\": \"VO2\", \"crystal_or_isolated\": \"surface\", \"vacuum\": \"[0,0,20]\", \"supercell\": \"[4,4,1]\", \"cell_size\": NaN, \"cas_number\": NaN, \"lattice_parameters\": \"[2.75, 2.75, 20]\", \"space_group\": NaN, \"mp_id\": NaN, \"isomer\": NaN, \"miller_indices\": NaN, \"crystal_structure\": NaN, \"additional_information\": NaN}')\n\ndft_params_27 = DFTParametersGeneral.parse_raw('{\"software\": \"vasp\", \"functional\": \"PBE\", \"k-points\": \"[5,5,1]\", \"pseudopotentials\": NaN, \"basis_set\": NaN, \"energy_cutoff\": 500.0, \"force_convergence\": 0.01, \"energy_convergence\": 0.0001, \"relaxed_nuclei\": NaN, \"relaxed_unit_cell\": NaN, \"spin\": NaN, \"hubbard_U\": NaN, \"ase_otherkeys\": NaN, \"other_information\": NaN, \"notes\": NaN}')\n\nstructure_metadata_Li = StructureMetadataGeneral.parse_raw('{\"common_name\": \"lithium atom\", \"scientific_name\": NaN, \"type\": \"isolated atom\", \"composition\": \"Li\", \"crystal_or_isolated\": \"atom\", \"vacuum\": NaN, \"supercell\": NaN, \"cell_size\": NaN, \"cas_number\": NaN, \"lattice_parameters\": NaN, \"space_group\": NaN, \"mp_id\": NaN, \"isomer\": NaN, \"miller_indices\": NaN, \"crystal_structure\": NaN, \"additional_information\": \"just one isolated atom, to be added as an adsorbate\"}')\n\nstructure_metadata_Na = StructureMetadataGeneral.parse_raw('{\"common_name\": \"sodium atom\", \"scientific_name\": NaN, \"type\": \"isolated atom\", \"composition\": \"Na\", \"crystal_or_isolated\": \"atom\", \"vacuum\": NaN, \"supercell\": NaN, \"cell_size\": NaN, \"cas_number\": NaN, \"lattice_parameters\": NaN, \"space_group\": NaN, \"mp_id\": NaN, \"isomer\": NaN, \"miller_indices\": NaN, \"crystal_structure\": NaN, \"additional_information\": \"just one isolated atom, to be added as an adsorbate\"}')\n\nstructure_metadata_Mg = StructureMetadataGeneral.parse_raw('{\"common_name\": {\"structure_metadata_Mg\": \"magnesium atom\"}, \"scientific_name\": {\"structure_metadata_Mg\": NaN}, \"type\": {\"structure_metadata_Mg\": \"isolated atom\"}, \"composition\": {\"structure_metadata_Mg\": \"Mg\"}, \"crystal_or_isolated\": {\"structure_metadata_Mg\": \"atom\"}, \"vacuum\": {\"structure_metadata_Mg\": NaN}, \"supercell\": {\"structure_metadata_Mg\": NaN}, \"cell_size\": {\"structure_metadata_Mg\": NaN}, \"cas_number\": {\"structure_metadata_Mg\": NaN}, \"lattice_parameters\": {\"structure_metadata_Mg\": NaN}, \"space_group\": {\"structure_metadata_Mg\": NaN}, \"mp_id\": {\"structure_metadata_Mg\": NaN}, \"isomer\": {\"structure_metadata_Mg\": NaN}, \"miller_indices\": {\"structure_metadata_Mg\": NaN}, \"crystal_structure\": {\"structure_metadata_Mg\": NaN}, \"additional_information\": {\"structure_metadata_Mg\": \"just one isolated atom, to be added as an adsorbate\"}}')\n\nstructure_metadata_K = StructureMetadataGeneral.parse_raw('{\"common_name\": \"potassium atom\", \"scientific_name\": NaN, \"type\": \"isolated atom\", \"composition\": \"K\", \"crystal_or_isolated\": \"atom\", \"vacuum\": NaN, \"supercell\": NaN, \"cell_size\": NaN, \"cas_number\": NaN, \"lattice_parameters\": NaN, \"space_group\": NaN, \"mp_id\": NaN, \"isomer\": NaN, \"miller_indices\": NaN, \"crystal_structure\": NaN, \"additional_information\": \"just one isolated atom, to be added as an adsorbate\"}')\n\nstructure_metadata_Ca = StructureMetadataGeneral.parse_raw('{\"common_name\": \"calcium atom\", \"scientific_name\": NaN, \"type\": \"isolated atom\", \"composition\": \"Ca\", \"crystal_or_isolated\": \"atom\", \"vacuum\": NaN, \"supercell\": NaN, \"cell_size\": NaN, \"cas_number\": NaN, \"lattice_parameters\": NaN, \"space_group\": NaN, \"mp_id\": NaN, \"isomer\": NaN, \"miller_indices\": NaN, \"crystal_structure\": NaN, \"additional_information\": \"just one isolated atom, to be added as an adsorbate\"}')\n\n# Execution Code\n\natoms_VO2 = structure_from_metadata(structure_metadata_VO2)\natoms_Li = structure_from_metadata(structure_metadata_Li)\natoms_Na = structure_from_metadata(structure_metadata_Na)\natoms_Mg = structure_from_metadata(structure_metadata_Mg)\natoms_K = structure_from_metadata(structure_metadata_K)\natoms_Ca = structure_from_metadata(structure_metadata_Ca)\nrelaxed_atoms_VO2 = dft_general(atoms_VO2, dft_params_27)\natoms_VO2_Li = add_adsorbate(atoms_VO2, atoms_Li)\nenergy_Li = get_reference_energy(atoms_Li)\natoms_VO2_Na = add_adsorbate(atoms_VO2, atoms_Na)\nenergy_Na = get_reference_energy(atoms_Na)\natoms_VO2_Mg = add_adsorbate(atoms_VO2, atoms_Mg)\nenergy_Mg = get_reference_energy(atoms_Mg)\natoms_VO2_K = add_adsorbate(atoms_VO2, atoms_K)\nenergy_K = get_reference_energy(atoms_K)\natoms_VO2_Ca = add_adsorbate(atoms_VO2, atoms_Ca)\nenergy_Ca = get_reference_energy(atoms_Ca)\nVO2_dos = get_dos(relaxed_atoms_VO2)\nVO2_band_structure = get_band_structure(relaxed_atoms_VO2)\nVO2_energy = get_total_energy(relaxed_atoms_VO2)\natoms_VO2_Li_list = structure_modification_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Li)\natoms_VO2_Na_list = structure_modification_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Na)\natoms_VO2_Mg_list = structure_modification_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Mg)\natoms_VO2_K_list = structure_modification_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_K)\natoms_VO2_Ca_list = structure_modification_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Ca)\natoms_VO2_Li_list_relaxed = []\nfor atoms_VO2_Li_list_entry in atoms_VO2_Li_list:\n    atoms_VO2_Li_list_relaxed_entry = dft_general(atoms_VO2_Li_list_entry, dft_params_27)\n    atoms_VO2_Li_list_relaxed.append(atoms_VO2_Li_list_relaxed_entry)\n\nLi_diffusion_barrier = diffusion_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Li_list)\natoms_VO2_Na_list_relaxed = []\nfor atoms_VO2_Na_list_entry in atoms_VO2_Na_list:\n    atoms_VO2_Na_list_relaxed_entry = dft_general(atoms_VO2_Na_list_entry, dft_params_27)\n    atoms_VO2_Na_list_relaxed.append(atoms_VO2_Na_list_relaxed_entry)\n\nNa_diffusion_barrier = diffusion_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Na_list)\natoms_VO2_Mg_list_relaxed = []\nfor atoms_VO2_Mg_list_entry in atoms_VO2_Mg_list:\n    atoms_VO2_Mg_list_relaxed_entry = dft_general(atoms_VO2_Mg_list_entry, dft_params_27)\n    atoms_VO2_Mg_list_relaxed.append(atoms_VO2_Mg_list_relaxed_entry)\n\nMg_diffusion_barrier = diffusion_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Mg_list)\natoms_VO2_K_list_relaxed = []\nfor atoms_VO2_K_list_entry in atoms_VO2_K_list:\n    atoms_VO2_K_list_relaxed_entry = dft_general(atoms_VO2_K_list_entry, dft_params_27)\n    atoms_VO2_K_list_relaxed.append(atoms_VO2_K_list_relaxed_entry)\n\nK_diffusion_barrier = diffusion_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_K_list)\natoms_VO2_Ca_list_relaxed = []\nfor atoms_VO2_Ca_list_entry in atoms_VO2_Ca_list:\n    atoms_VO2_Ca_list_relaxed_entry = dft_general(atoms_VO2_Ca_list_entry, dft_params_27)\n    atoms_VO2_Ca_list_relaxed.append(atoms_VO2_Ca_list_relaxed_entry)\n\nCa_diffusion_barrier = diffusion_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Ca_list)\natoms_VO2_Li_stable = get_most_stable_structure(atoms_VO2_Li_list_relaxed)\natoms_VO2_Na_stable = get_most_stable_structure(atoms_VO2_Na_list_relaxed)\natoms_VO2_Mg_stable = get_most_stable_structure(atoms_VO2_Mg_list_relaxed)\natoms_VO2_K_stable = get_most_stable_structure(atoms_VO2_K_list_relaxed)\natoms_VO2_Ca_stable = get_most_stable_structure(atoms_VO2_Ca_list_relaxed)\nLi_system_energy = get_total_energy(atoms_VO2_Li_stable)\nLi_charge_density_results = charge_density_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Li_stable)\nNa_system_energy = get_total_energy(atoms_VO2_Na_stable)\nNa_charge_density_results = charge_density_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Na_stable)\nMg_system_energy = get_total_energy(atoms_VO2_Mg_stable)\nMg_charge_density_results = charge_density_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Mg_stable)\nK_system_energy = get_total_energy(atoms_VO2_K_stable)\nK_charge_density_results = charge_density_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_K_stable)\nCa_system_energy = get_total_energy(atoms_VO2_Ca_stable)\nCa_charge_density_results = charge_density_analysis_83728d84334c65a8b80a8cb07759d7303e89deec(atoms_VO2_Ca_stable)\nads_energy_Li = get_adsorption_energy_float(Li_system_energy, VO2_energy, energy_Li)\nads_energy_Na = get_adsorption_energy_float(Na_system_energy, VO2_energy, energy_Na)\nads_energy_Mg = get_adsorption_energy_float(Mg_system_energy, VO2_energy, energy_Mg)\nads_energy_K = get_adsorption_energy_float(K_system_energy, VO2_energy, energy_K)\nads_energy_Ca = get_adsorption_energy_float(Ca_system_energy, VO2_energy, energy_Ca)\n", "record_id": "2023_09_22_bba019fc933fc84ad347g"}