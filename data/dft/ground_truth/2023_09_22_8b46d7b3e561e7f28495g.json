{"code": "from ase import Atoms\nfrom ase.calculators.crystal import CRYSTAL\nfrom ase.optimize import BFGS\nfrom pydantic import BaseModel\n\nfrom annotations.models.CrystalParameters import CrystalParameters\nfrom annotations.models.StructureMetadata import StructureMetadata\n\n# Functions Code\n\n\n\ndef structure_generation_488a3f400ce8a05b35d9a6ed2ee0a0229518b18d(\n    parameters: StructureMetadata,\n) -> Atoms:\n    pass\n\n\ndef crystal14_geometric_relaxation(\n    atoms: Atoms, parameters: CrystalParameters\n) -> Atoms:\n    crystal_keys = [\n        \"restart\",\n        \"xc\",\n        \"spinpol\",\n        \"guess\",\n        \"basis\",\n        \"kpts\",\n        \"isp\",\n        \"smearing\",\n    ]\n    parameter_dict = {\n        k: v for k, v in parameters.dict(exclude_none=True).items() if k in crystal_keys\n    }\n    calc = CRYSTAL(**parameter_dict)\n    atoms.set_calculator(calc)\n    dyn = BFGS(atoms)\n    dyn.run(parameters.fmax)\n    return atoms\n\n\n# Inputs Code\n\n\n\nclass CrystalParameters(BaseModel):\n    version: bool | None = None\n    restart: bool | None = None\n    xc: str | None = None\n    spinpol: bool | None = None\n    guess: bool | None = None\n    basis: str | None = None\n    kpts: str | list[int] | None = None\n    isp: int | None = None\n    smearing: float | None = None\n    fmax: float | None = 1e-5\n\n    class Config:\n        extra = \"allow\"\n\n\n\nclass StructureMetadata(BaseModel):\n    id: str | None = None\n    name: str | None = None\n    type: str | None = None\n    composition: str | None = None\n    description: str | None = None\n    vacuum_x: float | None = None\n    vacuum_y: float | None = None\n    vacuum_z: float | None = None\n    supercell: str | None = None\n    cas_number: str | None = None\n    orientation: str | None = None\n    lattice_a: float | None = None\n    lattice_b: float | None = None\n    lattice_c: float | None = None\n    orientation: str | None = None\n    mp_id: str | None = None\n\nstructure_metadata_Na5_citrate = StructureMetadata.parse_raw('{\"name\": \"pentasodium hydrogen dicitrate\", \"type\": \"molecular\", \"composition\": \"Na5H(C6H5O7)2\", \"description\": \"crystal lattice\", \"vacuum_x\": NaN, \"vacuum_y\": NaN, \"vacuum_z\": NaN, \"supercell\": \"1x1x1\", \"cas_number\": NaN, \"lattice_a\": 6.35262, \"lattice_b\": 11.98628, \"lattice_c\": 12.16544, \"space group\": \"P1\", \"orientation\": NaN, \"mp_id\": NaN}')\n\ncrystal_parameters_5 = CrystalParameters.parse_raw('{\"version\": 9, \"restart\": NaN, \"xc\": \"B3LYP\", \"spinpol\": NaN, \"guess\": NaN, \"basis\": NaN, \"kpts\": \"[8,8,8]\", \"isp\": NaN, \"smearing\": NaN, \"tolinteg\": NaN, \"toldee\": NaN, \"fmax\": NaN, \"Rb_basis\": NaN}')\n\n# Execution Code\n\nNa5_citrate = structure_generation_488a3f400ce8a05b35d9a6ed2ee0a0229518b18d(structure_metadata_Na5_citrate)\nrelaxed_structure = crystal14_geometric_relaxation(Na5_citrate, crystal_parameters_5)\n", "graph_as_text": "[{\"description\": \"returns a pentasodium hydrogen dicitrate crystal structure as an atoms object\", \"function_id\": \"process_19\", \"function_name\": \"structure_generation_488a3f400ce8a05b35d9a6ed2ee0a0229518b18d\", \"input_types\": [\"StructureMetadata\"], \"inputs\": [\"structure_metadata_Na5_citrate\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"Na5_citrate\"], \"process_type\": \"structure_generation\"}, {\"description\": \"runs a dft geometric relaxation using ase and CRYSTAL14 and returns the atoms object from the import parameters specified in a pydantic basemodel called Crystal14Parameters and an input ase atoms object\", \"function_id\": \"process_20\", \"function_name\": \"crystal14_geometric_relaxation\", \"input_types\": [\"Atoms\", \"CrystalParameters\"], \"inputs\": [\"Na5_citrate\", \"crystal_parameters_5\"], \"output_types\": [\"Atoms\"], \"outputs\": [\"relaxed_structure\"], \"process_type\": \"dft\"}]", "no_header_code": "from ase import Atoms\nfrom ase.calculators.crystal import CRYSTAL\nfrom ase.optimize import BFGS\nfrom pydantic import BaseModel\n\nfrom annotations.models.CrystalParameters import CrystalParameters\nfrom annotations.models.StructureMetadata import StructureMetadata\n\n# Functions Code\n\n\n\ndef crystal14_geometric_relaxation(\n    atoms: Atoms, parameters: CrystalParameters\n) -> Atoms:\n    crystal_keys = [\n        \"restart\",\n        \"xc\",\n        \"spinpol\",\n        \"guess\",\n        \"basis\",\n        \"kpts\",\n        \"isp\",\n        \"smearing\",\n    ]\n    parameter_dict = {\n        k: v for k, v in parameters.dict(exclude_none=True).items() if k in crystal_keys\n    }\n    calc = CRYSTAL(**parameter_dict)\n    atoms.set_calculator(calc)\n    dyn = BFGS(atoms)\n    dyn.run(parameters.fmax)\n    return atoms\n\n\ndef structure_generation_488a3f400ce8a05b35d9a6ed2ee0a0229518b18d(\n    parameters: StructureMetadata,\n) -> Atoms:\n    pass\n\n\n# Inputs Code\n\n\n\nclass StructureMetadata(BaseModel):\n    id: str | None = None\n    name: str | None = None\n    type: str | None = None\n    composition: str | None = None\n    description: str | None = None\n    vacuum_x: float | None = None\n    vacuum_y: float | None = None\n    vacuum_z: float | None = None\n    supercell: str | None = None\n    cas_number: str | None = None\n    orientation: str | None = None\n    lattice_a: float | None = None\n    lattice_b: float | None = None\n    lattice_c: float | None = None\n    orientation: str | None = None\n    mp_id: str | None = None\n\n\n\nclass CrystalParameters(BaseModel):\n    version: bool | None = None\n    restart: bool | None = None\n    xc: str | None = None\n    spinpol: bool | None = None\n    guess: bool | None = None\n    basis: str | None = None\n    kpts: str | list[int] | None = None\n    isp: int | None = None\n    smearing: float | None = None\n    fmax: float | None = 1e-5\n\n    class Config:\n        extra = \"allow\"\n\nstructure_metadata_Na5_citrate = StructureMetadata.parse_raw('{\"name\": \"pentasodium hydrogen dicitrate\", \"type\": \"molecular\", \"composition\": \"Na5H(C6H5O7)2\", \"description\": \"crystal lattice\", \"vacuum_x\": NaN, \"vacuum_y\": NaN, \"vacuum_z\": NaN, \"supercell\": \"1x1x1\", \"cas_number\": NaN, \"lattice_a\": 6.35262, \"lattice_b\": 11.98628, \"lattice_c\": 12.16544, \"space group\": \"P1\", \"orientation\": NaN, \"mp_id\": NaN}')\n\ncrystal_parameters_5 = CrystalParameters.parse_raw('{\"version\": 9, \"restart\": NaN, \"xc\": \"B3LYP\", \"spinpol\": NaN, \"guess\": NaN, \"basis\": NaN, \"kpts\": \"[8,8,8]\", \"isp\": NaN, \"smearing\": NaN, \"tolinteg\": NaN, \"toldee\": NaN, \"fmax\": NaN, \"Rb_basis\": NaN}')\n\n# Execution Code\n\nNa5_citrate = structure_generation_488a3f400ce8a05b35d9a6ed2ee0a0229518b18d(structure_metadata_Na5_citrate)\nrelaxed_structure = crystal14_geometric_relaxation(Na5_citrate, crystal_parameters_5)\n", "record_id": "2023_09_22_8b46d7b3e561e7f28495g"}