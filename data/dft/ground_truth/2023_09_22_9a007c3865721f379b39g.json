{"code": "from os import environ\nfrom typing import Optional\n\nfrom ase import Atoms\nfrom ase.calculators.vasp import Vasp\nfrom ase.optimize import BFGS\nfrom pydantic import BaseModel\nfrom pymatgen.analysis.eos import EOS\nfrom pymatgen.analysis.phase_diagram import PhaseDiagram\nfrom pymatgen.entries import Entry\nfrom pymatgen.entries.computed_entries import ComputedStructureEntry\nfrom pymatgen.ext.matproj import MPRester\nfrom pymatgen.io.ase import AseAtomsAdaptor\n\nfrom annotations.models.ChemicalSystem import ChemicalSystem\nfrom annotations.models.Eos import Eos\nfrom annotations.models.VaspParameters import VaspParameters\n\n# Functions Code\n\n\n\ndef entry_to_atoms(entry: ComputedStructureEntry) -> Atoms:\n    adaptor = AseAtomsAdaptor()\n    ase_atoms = adaptor.get_atoms(entry)\n\n    return ase_atoms\n\n\ndef vasp_geometric_relaxation(atoms: Atoms, parameters: VaspParameters) -> Atoms:\n    vasp_keys = [\n        \"command\",\n        \"restart\",\n        \"xc\",\n        \"setups\",\n        \"pp\",\n        \"kpts\",\n        \"gamma\",\n        \"reciprocal\",\n        \"charge\",\n        \"prec\",\n        \"encut\",\n        \"ediff\",\n        \"nbands\",\n        \"algo\",\n        \"ismear\",\n        \"sigma\",\n        \"nelm\",\n    ]\n    vasp_dict = {\n        k: v for k, v in parameters.dict(exclude_none=True).items() if k in vasp_keys\n    }\n    calc = Vasp(**vasp_dict)\n    atoms.set_calculator(calc)\n    dyn = BFGS(atoms)\n    dyn.run(parameters.fmax)\n    return atoms\n\n\n\n\ndef get_structures_from_chemical_system(\n    chemical_system: ChemicalSystem,\n) -> list[ComputedStructureEntry]:\n    chemsys = chemical_system.chemsys\n    api_key = environ.get(\"MP_API_KEY\")\n    with MPRester(api_key) as mpr:\n        entries = mpr.get_entries_in_chemsys(chemsys)\n\n    return entries\n\n\ndef get_phase_diagram(\n    entries: list[Entry], energies: Optional[list[float]] = None\n) -> PhaseDiagram:\n    if energies is not None:\n        if len(energies) != len(entries):\n            raise ValueError(\n                f\"Entries and energies lists need to be the same length. Got {len(entries)} and {len(energies)}.\"\n            )\n        for entry, energy in zip(entries, energies):\n            entry.energy = energy\n\n    pd = PhaseDiagram(entries)\n\n    return pd\n\n\ndef get_total_energy(atoms: Atoms) -> float:\n    return atoms.get_potential_energy()\n\n\ndef get_bulk_modulus(list_atoms: Atoms, eos_name: Eos) -> float:\n    volumes = [[atoms.cell.volume] for atoms in list_atoms]\n    pressures = []\n    for atoms in list_atoms:\n        stress = atoms.get_stress()\n        pressure = -1.0 / 3.0 * (stress[0, 0] + stress[1, 1] + stress[2, 2])\n        pressures.append(pressure)\n\n    eos = EOS(eos_name.eos_name)\n    eos_fit = eos.fit(volumes, pressures)\n    B0 = eos_fit.b0_GPa\n\n    return B0\n\n\ndef deformed_structure_generation_for_8af359d35779146221e97c7b2190f1988272e8ee() -> (\n    Atoms\n):\n    pass\n\n\n# Inputs Code\n\n\n\nclass Eos(BaseModel):\n    eos_name: str\n\n\n\nclass VaspParameters(BaseModel):\n    id: str | None = None\n    command: str | None = None\n    txt: str | None = None\n    restart: bool | None = None\n    xc: str | None = None\n    setups: str | None = None\n    pp: str | None = None\n    kpts: str | tuple[int] | None = None\n    gamma: str | None = None\n    reciprocal: str | None = None\n    charge: int | None = None\n    prec: str | None = None\n    encut: float | None = None\n    ediff: float | None = None\n    nbands: int | None = None\n    algo: str | None = None\n    ismear: int | None = None\n    sigma: float | None = None\n    nelm: int | None = None\n    fmax: float | None = None\n\n\n\nclass ChemicalSystem(BaseModel):\n    chemsys: str\n\nli_si_o = ChemicalSystem.parse_raw('{\"chemsys\": \"Li-Si-O\"}')\n\ndft_parameter_set_2 = VaspParameters.parse_raw('{\"command\": NaN, \"restart\": NaN, \"xc\": \"PBE\", \"setups\": NaN, \"pp\": NaN, \"kpts\": \"{\\\"density\\\": 4}\", \"gamma\": NaN, \"reciprocal\": NaN, \"charge\": NaN, \"prec\": NaN, \"encut\": NaN, \"ediff\": NaN, \"nbands\": NaN, \"algo\": NaN, \"ismear\": NaN, \"sigma\": NaN, \"nelm\": NaN}')\n\nvinet_eos = Eos.parse_raw('{\"eos_name\": \"vinet\"}')\n\n# Execution Code\n\ndisordered_structures = deformed_structure_generation_for_8af359d35779146221e97c7b2190f1988272e8ee()\nli_si_o_entries = get_structures_from_chemical_system(li_si_o)\nrelaxed_disordered_structures = []\nfor disordered_structures_entry in disordered_structures:\n    relaxed_disordered_structures_entry = vasp_geometric_relaxation(disordered_structures_entry, dft_parameter_set_2)\n    relaxed_disordered_structures.append(relaxed_disordered_structures_entry)\n\nli_si_o_atoms = []\nfor li_si_o_entries_entry in li_si_o_entries:\n    li_si_o_atoms_entry = entry_to_atoms(li_si_o_entries_entry)\n    li_si_o_atoms.append(li_si_o_atoms_entry)\n\nbulk_modulus = get_bulk_modulus(relaxed_disordered_structures, vinet_eos)\nrelaxed_atoms = []\nfor li_si_o_atoms_entry in li_si_o_atoms:\n    relaxed_atoms_entry = vasp_geometric_relaxation(li_si_o_atoms_entry, dft_parameter_set_2)\n    relaxed_atoms.append(relaxed_atoms_entry)\n\nenergies = []\nfor relaxed_atoms_entry in relaxed_atoms:\n    energies_entry = get_total_energy(relaxed_atoms_entry)\n    energies.append(energies_entry)\n\nphase_diagram = get_phase_diagram(li_si_o_entries, energies)\n", "graph_as_text": "[{\"description\": \"returns a list of deformed structures in the Li-Si-O chemical system for the purpose of calculating the bulk modulus\", \"function_id\": \"process_39\", \"function_name\": \"deformed_structure_generation_for_8af359d35779146221e97c7b2190f1988272e8ee\", \"input_types\": [], \"inputs\": [], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"disordered_structures\"], \"process_type\": \"structure_generation\"}, {\"description\": \"use pymatgen to look up all entries in a chemical system and return a list of the structures as ASE atoms objects\", \"function_id\": \"process_34\", \"function_name\": \"get_structures_from_chemical_system\", \"input_types\": [\"ChemicalSystem\"], \"inputs\": [\"li_si_o\"], \"output_types\": [\"list[Entry]\"], \"outputs\": [\"li_si_o_entries\"], \"process_type\": \"structure_generation\"}, {\"description\": \"runs a dft geometric relaxation using ase and vasp and returns the atoms object from the import parameters specified in a pydantic basemodel called VaspParameters and an input ase atoms object\", \"function_id\": \"process_40\", \"function_name\": \"vasp_geometric_relaxation\", \"input_types\": [\"list[Atoms]\", \"VaspParameters\"], \"inputs\": [\"disordered_structures\", \"dft_parameter_set_2\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"relaxed_disordered_structures\"], \"process_type\": \"dft\"}, {\"description\": \"converts pymatgen entry to ase atoms\", \"function_id\": \"process_35\", \"function_name\": \"entry_to_atoms\", \"input_types\": [\"list[Entry]\"], \"inputs\": [\"li_si_o_entries\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"li_si_o_atoms\"], \"process_type\": \"utility\"}, {\"description\": \"gets the bulk modulus by fitting an equation of state (like \\\"Vinet\\\") to a list of pressures and volumes\", \"function_id\": \"process_41\", \"function_name\": \"get_bulk_modulus\", \"input_types\": [\"list[Atoms]\", \"Eos\"], \"inputs\": [\"relaxed_disordered_structures\", \"vinet_eos\"], \"output_types\": [\"float\"], \"outputs\": [\"bulk_modulus\"], \"process_type\": \"analysis\"}, {\"description\": \"runs a dft geometric relaxation using ase and vasp and returns the atoms object from the import parameters specified in a pydantic basemodel called VaspParameters and an input ase atoms object\", \"function_id\": \"process_36\", \"function_name\": \"vasp_geometric_relaxation\", \"input_types\": [\"list[Atoms]\", \"VaspParameters\"], \"inputs\": [\"li_si_o_atoms\", \"dft_parameter_set_2\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"relaxed_atoms\"], \"process_type\": \"dft\"}, {\"description\": \"returns the total energy as a float from the input ase atoms object\", \"function_id\": \"process_37\", \"function_name\": \"get_total_energy\", \"input_types\": [\"list[Atoms]\"], \"inputs\": [\"relaxed_atoms\"], \"output_types\": [\"list[float]\"], \"outputs\": [\"energies\"], \"process_type\": \"analysis\"}, {\"description\": \"uses pymatgen to get the phase diagram from a list of Entries\", \"function_id\": \"process_38\", \"function_name\": \"get_phase_diagram\", \"input_types\": [\"list[Entry]\", \"list[float]\"], \"inputs\": [\"li_si_o_entries\", \"energies\"], \"output_types\": [\"PhaseDiagram\"], \"outputs\": [\"phase_diagram\"], \"process_type\": \"analysis\"}]", "no_header_code": "from os import environ\nfrom typing import Optional\n\nfrom ase import Atoms\nfrom ase.calculators.vasp import Vasp\nfrom ase.optimize import BFGS\nfrom pydantic import BaseModel\nfrom pymatgen.analysis.eos import EOS\nfrom pymatgen.analysis.phase_diagram import PhaseDiagram\nfrom pymatgen.entries import Entry\nfrom pymatgen.entries.computed_entries import ComputedStructureEntry\nfrom pymatgen.ext.matproj import MPRester\nfrom pymatgen.io.ase import AseAtomsAdaptor\n\nfrom annotations.models.ChemicalSystem import ChemicalSystem\nfrom annotations.models.Eos import Eos\nfrom annotations.models.VaspParameters import VaspParameters\n\n# Functions Code\n\n\n\n\n\ndef get_structures_from_chemical_system(\n    chemical_system: ChemicalSystem,\n) -> list[ComputedStructureEntry]:\n    chemsys = chemical_system.chemsys\n    api_key = environ.get(\"MP_API_KEY\")\n    with MPRester(api_key) as mpr:\n        entries = mpr.get_entries_in_chemsys(chemsys)\n\n    return entries\n\n\ndef entry_to_atoms(entry: ComputedStructureEntry) -> Atoms:\n    adaptor = AseAtomsAdaptor()\n    ase_atoms = adaptor.get_atoms(entry)\n\n    return ase_atoms\n\n\ndef get_bulk_modulus(list_atoms: Atoms, eos_name: Eos) -> float:\n    volumes = [[atoms.cell.volume] for atoms in list_atoms]\n    pressures = []\n    for atoms in list_atoms:\n        stress = atoms.get_stress()\n        pressure = -1.0 / 3.0 * (stress[0, 0] + stress[1, 1] + stress[2, 2])\n        pressures.append(pressure)\n\n    eos = EOS(eos_name.eos_name)\n    eos_fit = eos.fit(volumes, pressures)\n    B0 = eos_fit.b0_GPa\n\n    return B0\n\n\ndef vasp_geometric_relaxation(atoms: Atoms, parameters: VaspParameters) -> Atoms:\n    vasp_keys = [\n        \"command\",\n        \"restart\",\n        \"xc\",\n        \"setups\",\n        \"pp\",\n        \"kpts\",\n        \"gamma\",\n        \"reciprocal\",\n        \"charge\",\n        \"prec\",\n        \"encut\",\n        \"ediff\",\n        \"nbands\",\n        \"algo\",\n        \"ismear\",\n        \"sigma\",\n        \"nelm\",\n    ]\n    vasp_dict = {\n        k: v for k, v in parameters.dict(exclude_none=True).items() if k in vasp_keys\n    }\n    calc = Vasp(**vasp_dict)\n    atoms.set_calculator(calc)\n    dyn = BFGS(atoms)\n    dyn.run(parameters.fmax)\n    return atoms\n\n\ndef get_total_energy(atoms: Atoms) -> float:\n    return atoms.get_potential_energy()\n\n\ndef deformed_structure_generation_for_8af359d35779146221e97c7b2190f1988272e8ee() -> (\n    Atoms\n):\n    pass\n\n\ndef get_phase_diagram(\n    entries: list[Entry], energies: Optional[list[float]] = None\n) -> PhaseDiagram:\n    if energies is not None:\n        if len(energies) != len(entries):\n            raise ValueError(\n                f\"Entries and energies lists need to be the same length. Got {len(entries)} and {len(energies)}.\"\n            )\n        for entry, energy in zip(entries, energies):\n            entry.energy = energy\n\n    pd = PhaseDiagram(entries)\n\n    return pd\n\n\n# Inputs Code\n\n\n\nclass Eos(BaseModel):\n    eos_name: str\n\n\n\nclass VaspParameters(BaseModel):\n    id: str | None = None\n    command: str | None = None\n    txt: str | None = None\n    restart: bool | None = None\n    xc: str | None = None\n    setups: str | None = None\n    pp: str | None = None\n    kpts: str | tuple[int] | None = None\n    gamma: str | None = None\n    reciprocal: str | None = None\n    charge: int | None = None\n    prec: str | None = None\n    encut: float | None = None\n    ediff: float | None = None\n    nbands: int | None = None\n    algo: str | None = None\n    ismear: int | None = None\n    sigma: float | None = None\n    nelm: int | None = None\n    fmax: float | None = None\n\n\n\nclass ChemicalSystem(BaseModel):\n    chemsys: str\n\nli_si_o = ChemicalSystem.parse_raw('{\"chemsys\": \"Li-Si-O\"}')\n\ndft_parameter_set_2 = VaspParameters.parse_raw('{\"command\": NaN, \"restart\": NaN, \"xc\": \"PBE\", \"setups\": NaN, \"pp\": NaN, \"kpts\": \"{\\\"density\\\": 4}\", \"gamma\": NaN, \"reciprocal\": NaN, \"charge\": NaN, \"prec\": NaN, \"encut\": NaN, \"ediff\": NaN, \"nbands\": NaN, \"algo\": NaN, \"ismear\": NaN, \"sigma\": NaN, \"nelm\": NaN}')\n\nvinet_eos = Eos.parse_raw('{\"eos_name\": \"vinet\"}')\n\n# Execution Code\n\ndisordered_structures = deformed_structure_generation_for_8af359d35779146221e97c7b2190f1988272e8ee()\nli_si_o_entries = get_structures_from_chemical_system(li_si_o)\nrelaxed_disordered_structures = []\nfor disordered_structures_entry in disordered_structures:\n    relaxed_disordered_structures_entry = vasp_geometric_relaxation(disordered_structures_entry, dft_parameter_set_2)\n    relaxed_disordered_structures.append(relaxed_disordered_structures_entry)\n\nli_si_o_atoms = []\nfor li_si_o_entries_entry in li_si_o_entries:\n    li_si_o_atoms_entry = entry_to_atoms(li_si_o_entries_entry)\n    li_si_o_atoms.append(li_si_o_atoms_entry)\n\nbulk_modulus = get_bulk_modulus(relaxed_disordered_structures, vinet_eos)\nrelaxed_atoms = []\nfor li_si_o_atoms_entry in li_si_o_atoms:\n    relaxed_atoms_entry = vasp_geometric_relaxation(li_si_o_atoms_entry, dft_parameter_set_2)\n    relaxed_atoms.append(relaxed_atoms_entry)\n\nenergies = []\nfor relaxed_atoms_entry in relaxed_atoms:\n    energies_entry = get_total_energy(relaxed_atoms_entry)\n    energies.append(energies_entry)\n\nphase_diagram = get_phase_diagram(li_si_o_entries, energies)\n", "record_id": "2023_09_22_9a007c3865721f379b39g"}