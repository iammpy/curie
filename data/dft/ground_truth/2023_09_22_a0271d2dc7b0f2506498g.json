{"code": "from ase import Atoms\nfrom pydantic import BaseModel\n\nfrom annotations.models.SpartanParameters import SpartanParameters\n\n# Functions Code\n\n\n\ndef structure_generation_989a7274be46a1facbc0ef1771ac8d5202fd816e() -> Atoms:\n    pass\n\n\ndef spartan_relaxation(atoms: Atoms, parameters: SpartanParameters) -> Atoms:\n    pass\n\n\n# Inputs Code\n\n\n\nclass SpartanParameters(BaseModel):\n    xc: str | None = None\n    basis: str | None = None\n    version: str | None = None\n\nspartan_1 = SpartanParameters.parse_raw('{\"xc\": \"B3LYP\", \"basis\": \"6-31+G*\", \"version\": \"1.1.0\"}')\n\n# Execution Code\n\nmolecular_structures = structure_generation_989a7274be46a1facbc0ef1771ac8d5202fd816e()\nrelaxed_molecular_structures = []\nfor molecular_structures_entry in molecular_structures:\n    relaxed_molecular_structures_entry = spartan_relaxation(molecular_structures_entry, spartan_1)\n    relaxed_molecular_structures.append(relaxed_molecular_structures_entry)\n\n", "graph_as_text": "[{\"description\": \"returns the chemical structures of 1,2,4-Triazole derivatives as ASE atoms objects\", \"function_id\": \"process_61\", \"function_name\": \"structure_generation_989a7274be46a1facbc0ef1771ac8d5202fd816e\", \"input_types\": [], \"inputs\": [], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"molecular_structures\"], \"process_type\": \"structure_generation\"}, {\"description\": \"runs DFT using Spartan14, taking in an Atoms object and a set of parameters, and returning the relaxed atoms object\", \"function_id\": \"process_62\", \"function_name\": \"spartan_relaxation\", \"input_types\": [\"list[Atoms]\", \"SpartanParameters\"], \"inputs\": [\"molecular_structures\", \"spartan_1\"], \"output_types\": [\"list[Atoms]\"], \"outputs\": [\"relaxed_molecular_structures\"], \"process_type\": \"dft\"}]", "no_header_code": "from ase import Atoms\nfrom pydantic import BaseModel\n\nfrom annotations.models.SpartanParameters import SpartanParameters\n\n# Functions Code\n\n\n\ndef structure_generation_989a7274be46a1facbc0ef1771ac8d5202fd816e() -> Atoms:\n    pass\n\n\ndef spartan_relaxation(atoms: Atoms, parameters: SpartanParameters) -> Atoms:\n    pass\n\n\n# Inputs Code\n\n\n\nclass SpartanParameters(BaseModel):\n    xc: str | None = None\n    basis: str | None = None\n    version: str | None = None\n\nspartan_1 = SpartanParameters.parse_raw('{\"xc\": \"B3LYP\", \"basis\": \"6-31+G*\", \"version\": \"1.1.0\"}')\n\n# Execution Code\n\nmolecular_structures = structure_generation_989a7274be46a1facbc0ef1771ac8d5202fd816e()\nrelaxed_molecular_structures = []\nfor molecular_structures_entry in molecular_structures:\n    relaxed_molecular_structures_entry = spartan_relaxation(molecular_structures_entry, spartan_1)\n    relaxed_molecular_structures.append(relaxed_molecular_structures_entry)\n\n", "record_id": "2023_09_22_a0271d2dc7b0f2506498g"}